"""
API –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ª–∞–π–¥–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Puppeteer –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
"""

from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import asyncio
import json
import base64
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±—ç–∫–µ–Ω–¥

router = APIRouter()

class SlideData(BaseModel):
    slide_id: str
    slide_type: str
    title: str
    content: Dict[str, Any]
    chart_data: Optional[List[Dict[str, Any]]] = None
    selected_metrics: Optional[List[str]] = None

class RenderSlidesRequest(BaseModel):
    report: Dict[str, Any]
    slide_data: List[tuple]  # [(slide_id, slide_data), ...]

class RenderSlidesResponse(BaseModel):
    success: bool
    images: List[str]  # Base64 encoded images
    error: Optional[str] = None

@router.post("/render-slides", response_model=RenderSlidesResponse)
async def render_slides(request: RenderSlidesRequest):
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –≤—Å–µ —Å–ª–∞–π–¥—ã –æ—Ç—á–µ—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        print(f"üé® –†–µ–Ω–¥–µ—Ä–∏–º {len(request.slide_data)} —Å–ª–∞–π–¥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        
        images = []
        
        for slide_id, slide_data in request.slide_data:
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–∞–π–¥ –≤ –æ—Ç—á–µ—Ç–µ
                slide = None
                for s in request.report.get('slides', []):
                    if s.get('id') == slide_id:
                        slide = s
                        break
                
                if not slide:
                    print(f"‚ö†Ô∏è –°–ª–∞–π–¥ {slide_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—á–µ—Ç–µ")
                    continue
                
                # –†–µ–Ω–¥–µ—Ä–∏–º —Å–ª–∞–π–¥
                image_data = await render_single_slide(slide, slide_data)
                if image_data:
                    images.append(image_data)
                    print(f"‚úÖ –°–ª–∞–π–¥ {slide_id} –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ª–∞–π–¥ {slide_id}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ª–∞–π–¥–∞ {slide_id}: {e}")
                continue
        
        print(f"üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return RenderSlidesResponse(
            success=True,
            images=images
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ª–∞–π–¥–æ–≤: {e}")
        return RenderSlidesResponse(
            success=False,
            images=[],
            error=str(e)
        )

async def render_single_slide(slide: Dict[str, Any], slide_data: Dict[str, Any]) -> Optional[str]:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –æ–¥–∏–Ω —Å–ª–∞–π–¥ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """
    try:
        slide_type = slide.get('type', '')
        title = slide.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        if slide_type in ['finance-chart', 'analytics-chart']:
            return await render_chart_slide(title, slide_data)
        elif slide_type == 'comparison':
            return await render_comparison_slide(title, slide_data)
        elif slide_type == 'table':
            return await render_table_slide(title, slide_data)
        else:
            return await render_text_slide(title, slide.get('description', ''))
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ª–∞–π–¥–∞ {slide.get('id', 'unknown')}: {e}")
        return None

async def render_chart_slide(title: str, slide_data: Dict[str, Any]) -> str:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –≥—Ä–∞—Ñ–∏–∫
    """
    chart_data = slide_data.get('chartData', [])
    selected_metrics = slide_data.get('selectedMetrics', ['value'])
    
    if not chart_data:
        return await render_text_slide(title, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å matplotlib
    fig, ax = plt.subplots(figsize=(10, 6))
    fig.patch.set_facecolor('white')
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    labels = [item.get('label', f'–ü–µ—Ä–∏–æ–¥ {i+1}') for i, item in enumerate(chart_data)]
    x = range(len(labels))
    
    # –†–µ–Ω–¥–µ—Ä–∏–º –º–µ—Ç—Ä–∏–∫–∏
    colors = ['#4CAF50', '#2196F3', '#FF9800', '#F44336']
    for i, metric in enumerate(selected_metrics):
        values = [item.get(metric, 0) for item in chart_data]
        ax.bar([pos + i * 0.8/len(selected_metrics) for pos in x], values, 
               width=0.8/len(selected_metrics), label=metric, color=colors[i % len(colors)])
    
    ax.set_title(title, fontsize=16, fontweight='bold', pad=20)
    ax.set_xlabel('–ü–µ—Ä–∏–æ–¥', fontsize=12)
    ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ', fontsize=12)
    ax.set_xticks([pos + 0.4 for pos in x])
    ax.set_xticklabels(labels, rotation=45, ha='right')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    buffer = BytesIO()
    plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight', facecolor='white')
    buffer.seek(0)
    image_data = base64.b64encode(buffer.getvalue()).decode('utf-8')
    plt.close(fig)
    
    return f"data:image/png;base64,{image_data}"

async def render_comparison_slide(title: str, slide_data: Dict[str, Any]) -> str:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–ª–∞–π–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    """
    chart_data = slide_data.get('chartData', [])
    
    if not chart_data:
        return await render_text_slide(title, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π
    img = Image.new('RGB', (800, 600), color='white')
    draw = ImageDraw.Draw(img)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        title_font = ImageFont.truetype("arial.ttf", 24)
        header_font = ImageFont.truetype("arial.ttf", 16)
        cell_font = ImageFont.truetype("arial.ttf", 12)
    except:
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
        title_font = ImageFont.load_default()
        header_font = ImageFont.load_default()
        cell_font = ImageFont.load_default()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((400, 30), title, fill='black', font=title_font, anchor='mm')
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    columns = list(chart_data[0].keys()) if chart_data else []
    if 'label' in columns:
        columns.remove('label')
        columns.insert(0, 'label')
    
    # –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    y_start = 100
    row_height = 40
    col_width = 150
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    for i, col in enumerate(columns):
        x = 50 + i * col_width
        draw.rectangle([x, y_start, x + col_width, y_start + row_height], outline='black')
        draw.text((x + col_width//2, y_start + row_height//2), col, 
                 fill='black', font=header_font, anchor='mm')
    
    # –î–∞–Ω–Ω—ã–µ
    for row_idx, row in enumerate(chart_data):
        y = y_start + (row_idx + 1) * row_height
        for col_idx, col in enumerate(columns):
            x = 50 + col_idx * col_width
            draw.rectangle([x, y, x + col_width, y + row_height], outline='black')
            value = str(row.get(col, 0))
            draw.text((x + col_width//2, y + row_height//2), value, 
                     fill='black', font=cell_font, anchor='mm')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    buffer = BytesIO()
    img.save(buffer, format='PNG')
    buffer.seek(0)
    image_data = base64.b64encode(buffer.getvalue()).decode('utf-8')
    
    return f"data:image/png;base64,{image_data}"

async def render_table_slide(title: str, slide_data: Dict[str, Any]) -> str:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–∞–±–ª–∏—á–Ω—ã–π —Å–ª–∞–π–¥
    """
    return await render_comparison_slide(title, slide_data)

async def render_text_slide(title: str, content: str) -> str:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–∞–π–¥
    """
    img = Image.new('RGB', (800, 600), color='white')
    draw = ImageDraw.Draw(img)
    
    try:
        title_font = ImageFont.truetype("arial.ttf", 24)
        content_font = ImageFont.truetype("arial.ttf", 16)
    except:
        title_font = ImageFont.load_default()
        content_font = ImageFont.load_default()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((400, 200), title, fill='black', font=title_font, anchor='mm')
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
    draw.text((400, 300), content, fill='black', font=content_font, anchor='mm')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    buffer = BytesIO()
    img.save(buffer, format='PNG')
    buffer.seek(0)
    image_data = base64.b64encode(buffer.getvalue()).decode('utf-8')
    
    return f"data:image/png;base64,{image_data}"
