from typing import Dict, List, Optional, Any
from uuid import UUID

from fastapi import APIRouter, Depends, HTTPException, Request
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from src.scheme.finance import AggregatedData, DetailedCategoryMetrics
from src.api.v1.endpoints.finance.utils import finances_db, metric_service, analytics_service
from src.service.finance import (
    PeriodService, CategoryService, ShopService, MetricService,
    ActualValueService, PlanValueService
)
from src.model.finance.metric import Metric as MetricModel
from src.model.finance.category import Category as CategoryModel
from src.model.finance.shop import Shop as ShopModel
from src.model.finance.period import Period as PeriodModel
from src.model.finance.plan_value import PlanValue as PlanValueModel
from src.model.finance.actual_value import ActualValue as ActualValueModel
from fastapi import status

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
period_service = PeriodService()
category_service = CategoryService()
shop_service = ShopService()
actual_value_service = ActualValueService()
plan_value_service = PlanValueService()

router = APIRouter()

@router.get("/budget-statistics", response_model=Dict[str, Any])
async def get_budget_statistics(
    shop_id: Optional[UUID] = None,
    year: Optional[int] = None,
    month: Optional[int] = None,
    session: AsyncSession = Depends(finances_db.get_session)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±—é–¥–∂–µ—Ç—É.
    
    Args:
        shop_id: ID –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        year: –ì–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        month: –ú–µ—Å—è—Ü –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–µ—Å—è—Ü–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if month is not None and (month < 1 or month > 12):
        raise HTTPException(
            status_code=400,
            detail="–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 12"
        )
    
    # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ None –∑–Ω–∞—á–µ–Ω–∏—è
    kwargs = {"session": session, "shop_id": shop_id}
    if year is not None:
        kwargs["year"] = year
    if month is not None:
        kwargs["month"] = month
    
    return await metric_service.calculate_budget_statistics(**kwargs)

@router.get("/dashboard/aggregate", response_model=AggregatedData)
async def get_dashboard_aggregate_data(
    session: AsyncSession = Depends(finances_db.get_session)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞.
    """
    return await analytics_service.get_aggregated_data(session=session)

@router.get("/metrics/details/{category_id}/{shop_id}/{year}")
async def get_metrics_details(
    category_id: UUID,
    shop_id: UUID,
    year: int,
    session: AsyncSession = Depends(finances_db.get_session)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞ –≥–æ–¥.
    
    Args:
        category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        shop_id: ID –º–∞–≥–∞–∑–∏–Ω–∞
        year: –ì–æ–¥
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        stmt = select(MetricModel).where(MetricModel.category_id == category_id)
        result = await session.execute(stmt)
        metrics = result.scalars().all()
        
        if not metrics:
            return {"metrics": [], "category_name": "", "shop_name": "", "year": year}
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        stmt = select(CategoryModel).where(CategoryModel.id == category_id)
        result = await session.execute(stmt)
        category = result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
        stmt = select(ShopModel).where(ShopModel.id == shop_id)
        result = await session.execute(stmt)
        shop = result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –≥–æ–¥–∞
        stmt = select(PeriodModel).where(PeriodModel.year == year)
        result = await session.execute(stmt)
        periods = result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫
        plan_values_stmt = select(PlanValueModel).where(
            PlanValueModel.metric_id.in_([m.id for m in metrics]),
            PlanValueModel.shop_id == shop_id,
            PlanValueModel.period_id.in_([p.id for p in periods])
        )
        plan_values_result = await session.execute(plan_values_stmt)
        plan_values = plan_values_result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫
        actual_values_stmt = select(ActualValueModel).where(
            ActualValueModel.metric_id.in_([m.id for m in metrics]),
            ActualValueModel.shop_id == shop_id,
            ActualValueModel.period_id.in_([p.id for p in periods])
        )
        actual_values_result = await session.execute(actual_values_stmt)
        actual_values = actual_values_result.scalars().all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã
        year_period = next((p for p in periods if p.year == year and p.quarter is None and p.month is None), None)
        quarters = {q: [p for p in periods if p.year == year and p.quarter == q and p.month is None] for q in range(1, 5)}
        months = {m: [p for p in periods if p.year == year and p.month == m] for m in range(1, 13)}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        metrics_data = []
        for metric in metrics:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
            quarters_data = {}
            for q in range(1, 5):
                quarter_name = {1: "I –∫–≤–∞—Ä—Ç–∞–ª", 2: "II –∫–≤–∞—Ä—Ç–∞–ª", 3: "III –∫–≤–∞—Ä—Ç–∞–ª", 4: "IV –∫–≤–∞—Ä—Ç–∞–ª"}[q]
                quarter_period = quarters[q][0] if quarters[q] else None
                if not quarter_period:
                    continue
                
                # –ü–ª–∞–Ω –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª–∞
                quarter_plan = next((pv.value for pv in plan_values if pv.period_id == quarter_period.id and pv.metric_id == metric.id), 0)
                
                # –§–∞–∫—Ç –¥–ª—è –∫–≤–∞—Ä—Ç–∞–ª–∞ - –ê–ì–†–ï–ì–ò–†–£–ï–ú –ò–ó –ú–ï–°–Ø–ß–ù–´–• –î–ê–ù–ù–´–•
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Å—è—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞
                quarter_months = [p for p in periods if p.year == year and p.quarter == q and p.month is not None]
                quarter_month_actuals = [av for av in actual_values if any(av.period_id == mp.id for mp in quarter_months) and av.metric_id == metric.id]
                quarter_actual = sum(av.value for av in quarter_month_actuals)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if quarter_month_actuals:
                    print(f"üìä –ö–≤–∞—Ä—Ç–∞–ª {q}: –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º {len(quarter_month_actuals)} –º–µ—Å—è—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π = {quarter_actual}")
                else:
                    print(f"üìä –ö–≤–∞—Ä—Ç–∞–ª {q}: –Ω–µ—Ç –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                
                # ID –∏ –ø—Ä–∏—á–∏–Ω–∞ - –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                quarter_actual_id = str(quarter_month_actuals[0].id) if quarter_month_actuals else None
                quarter_reason = quarter_month_actuals[0].reason if quarter_month_actuals else ""
                
                # –†–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                quarter_variance = quarter_plan - quarter_actual
                quarter_procent = (quarter_actual / quarter_plan * 100) if quarter_plan and quarter_actual else 0
                
                quarters_data[quarter_name] = {
                    "plan": quarter_plan,
                    "actual": quarter_actual,
                    "variance": quarter_variance,
                    "procent": round(quarter_procent, 2),
                    "actual_value_id": quarter_actual_id,
                    "reason": quarter_reason
                }
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
            months_data = {}
            month_names = {
                1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å", 5: "–º–∞–π", 6: "–∏—é–Ω—å",
                7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç", 9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å"
            }
            for m in range(1, 13):
                month_period = months[m][0] if months[m] else None
                if not month_period:
                    continue
                
                # –ü–ª–∞–Ω –¥–ª—è –º–µ—Å—è—Ü–∞
                month_plan = next((pv.value for pv in plan_values if pv.period_id == month_period.id and pv.metric_id == metric.id), 0)
                
                # –§–∞–∫—Ç –¥–ª—è –º–µ—Å—è—Ü–∞
                month_actual_value = next((av for av in actual_values if av.period_id == month_period.id and av.metric_id == metric.id), None)
                month_actual = month_actual_value.value if month_actual_value else 0
                
                # ID —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–∏—á–∏–Ω–∞
                month_actual_id = str(month_actual_value.id) if month_actual_value else None
                month_reason = month_actual_value.reason if month_actual_value else ""
                
                # –†–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                month_variance = month_plan - month_actual
                month_procent = (month_actual / month_plan * 100) if month_plan and month_actual else 0
                
                months_data[month_names[m]] = {
                    "plan": month_plan,
                    "actual": month_actual,
                    "variance": month_variance,
                    "procent": round(month_procent, 2),
                    "actual_value_id": month_actual_id,
                    "reason": month_reason
                }
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥—É
            year_plan = sum(q_data["plan"] for q_data in quarters_data.values())
            year_actual = sum(q_data["actual"] for q_data in quarters_data.values())
            year_variance = year_plan - year_actual
            year_procent = (year_actual / year_plan * 100) if year_plan and year_actual else 0
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Ç—Ä–∏–∫–µ
            metric_data = {
                "metric_id": str(metric.id),
                "metric_name": metric.name,
                "unit": metric.unit,
                "periods_value": {
                    "year": {
                        "plan": year_plan,
                        "actual": year_actual,
                        "variance": year_variance,
                        "procent": round(year_procent, 2)
                    },
                    "quarters": quarters_data,
                    "months": months_data
                }
            }
            
            metrics_data.append(metric_data)
        
        return {
            "metrics": metrics_data,
            "category_name": category.name if category else "",
            "shop_name": shop.name if shop else "",
            "year": year
        }
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º: {str(e)}"
        )

@router.get("/actual-vs-plan/{period_id}", response_model=Dict[str, Any])
async def get_actual_vs_plan(
    period_id: UUID,
    shop_id: Optional[UUID] = None,
    category_id: Optional[UUID] = None,
    session: AsyncSession = Depends(finances_db.get_session)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –ø–ª–∞–Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    
    Args:
        period_id: ID –ø–µ—Ä–∏–æ–¥–∞
        shop_id: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, ID –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        category_id: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    return await analytics_service.get_actual_vs_plan(
        period_id=period_id,
        session=session,
        shop_id=shop_id,
        category_id=category_id
    )

@router.get("/total-metrics-by-shop/{period_id}", response_model=Dict[str, Any])
async def get_total_metrics_by_shop(
    period_id: UUID,
    session: AsyncSession = Depends(finances_db.get_session)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º.
    
    Args:
        period_id: ID –ø–µ—Ä–∏–æ–¥–∞
    """
    return await analytics_service.get_total_metrics_by_shop(
        period_id=period_id,
        session=session
    ) 

@router.get("/comprehensive", response_model=Dict[str, Any])
async def get_comprehensive_analytics(
    years: Optional[str] = None,
    categories: Optional[str] = None,
    shops: Optional[str] = None,
    metrics: Optional[str] = None,
    month_start: Optional[int] = None,
    month_end: Optional[int] = None,
    session: AsyncSession = Depends(finances_db.get_session)
):
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Analytics.
    
    Args:
        years: Comma-separated —Å–ø–∏—Å–æ–∫ –≥–æ–¥–æ–≤
        categories: Comma-separated —Å–ø–∏—Å–æ–∫ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        shops: Comma-separated —Å–ø–∏—Å–æ–∫ ID –º–∞–≥–∞–∑–∏–Ω–æ–≤
        metrics: Comma-separated —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –º–µ—Ç—Ä–∏–∫ (actual, plan, deviation, percentage)
        session: –°–µ—Å—Å–∏—è –ë–î
    """
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        year_list = [int(y.strip()) for y in years.split(',') if y.strip()] if years else []
        category_list = [c.strip() for c in categories.split(',') if c.strip()] if categories else []
        shop_list = [s.strip() for s in shops.split(',') if s.strip()] if shops else []
        metric_list = [m.strip() for m in metrics.split(',') if m.strip()] if metrics else ['actual', 'plan']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–µ—Ç
        all_periods = []
        if year_list:
            for year in year_list:
                year_periods = await period_service.get_by_year(year, session)
                all_periods.extend(year_periods)
        
        if not all_periods:
            return {
                "comparison": {"yearly": {}, "quarterly": {}, "monthly": {}, "categories": {}, "shops": {}},
                "trends": {"yearly": {}, "quarterly": {}, "monthly": {}},
                "planVsActual": {"categories": {}, "shops": {}, "metrics": {}}
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        all_actual_values = []
        all_plan_values = []
        
        for period in all_periods:
            period_actuals = await actual_value_service.get_by_period(period.id, session)
            period_plans = await plan_value_service.get_by_period(period.id, session)
            all_actual_values.extend(period_actuals)
            all_plan_values.extend(period_plans)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        all_categories = await category_service.get_all(session)
        all_shops = await shop_service.get_all(session)
        all_metrics = await metric_service.get_all(session)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        if category_list:
            category_ids = [UUID(cat_id) for cat_id in category_list]
            metric_ids_for_categories = []
            for metric in all_metrics:
                if metric.category_id in category_ids:
                    metric_ids_for_categories.append(metric.id)
            
            all_actual_values = [av for av in all_actual_values if av.metric_id in metric_ids_for_categories]
            all_plan_values = [pv for pv in all_plan_values if pv.metric_id in metric_ids_for_categories]
        
        if shop_list:
            shop_ids = [UUID(shop_id) for shop_id in shop_list]
            all_actual_values = [av for av in all_actual_values if av.shop_id in shop_ids]
            all_plan_values = [pv for pv in all_plan_values if pv.shop_id in shop_ids]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–µ—Å—è—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        ms = 1 if month_start is None else max(1, min(12, int(month_start)))
        me = 12 if month_end is None else max(ms, min(12, int(month_end)))

        result = {
            "comparison": prepare_comparison_data(
                all_actual_values, all_plan_values, all_periods, 
                all_categories, all_shops, year_list, all_metrics
            ),
            "trends": prepare_trends_data(
                all_actual_values, all_plan_values, all_periods, year_list, month_start=ms, month_end=me
            ),
            "trendStats": prepare_trends_statistics(
                all_actual_values, all_plan_values, all_periods, year_list, month_start=ms, month_end=me
            ),
            "planVsActual": prepare_plan_vs_actual_data(
                all_actual_values, all_plan_values, 
                all_categories, all_shops, all_metrics
            ),
            "planVsActualStats": prepare_plan_vs_actual_stats(
                all_actual_values, all_plan_values
            )
        }
        
        return result
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
        import traceback
        print(traceback.format_exc())
        
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

def prepare_comparison_data(actual_values, plan_values, periods, categories, shops, years, all_metrics):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    comparison = {
        "yearly": {},
        "quarterly": {},
        "monthly": {},
        "categories": {},
        "shops": {}
    }
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ–¥–∞–º
    for year in years:
        year_periods = [p for p in periods if p.year == year]
        year_actuals = [av for av in actual_values if any(av.period_id == p.id for p in year_periods)]
        year_plans = [pv for pv in plan_values if any(pv.period_id == p.id for p in year_periods)]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        actual_sum = sum(av.value for av in year_actuals)
        plan_sum = sum(pv.value for pv in year_plans)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        deviation = actual_sum - plan_sum  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –§–∞–∫—Ç - –ü–ª–∞–Ω
        percentage = (actual_sum / plan_sum * 100) if plan_sum > 0 else 0  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        comparison["yearly"][year] = {
            "actual": actual_sum,
            "plan": plan_sum,
            "deviation": deviation,
            "percentage": round(percentage, 2)
        }
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
    for year in years:
        comparison["quarterly"][year] = {}
        for quarter in range(1, 5):
            quarter_periods = [p for p in periods if p.year == year and p.quarter == quarter]
            quarter_actuals = [av for av in actual_values if any(av.period_id == p.id for p in quarter_periods)]
            quarter_plans = [pv for pv in plan_values if any(pv.period_id == p.id for p in quarter_periods)]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            actual_sum = sum(av.value for av in quarter_actuals)
            plan_sum = sum(pv.value for pv in quarter_plans)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            deviation = actual_sum - plan_sum  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –§–∞–∫—Ç - –ü–ª–∞–Ω
            percentage = (actual_sum / plan_sum * 100) if plan_sum > 0 else 0  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
            comparison["quarterly"][year][f"Q{quarter}"] = {
                "actual": actual_sum,
                "plan": plan_sum,
                "deviation": deviation,
                "percentage": round(percentage, 2)
            }
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    for year in years:
        comparison["monthly"][year] = {}
        for month in range(1, 13):
            month_periods = [p for p in periods if p.year == year and p.month == month]
            month_actuals = [av for av in actual_values if any(av.period_id == p.id for p in month_periods)]
            month_plans = [pv for pv in plan_values if any(pv.period_id == p.id for p in month_periods)]
            
            month_names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            actual_sum = sum(av.value for av in month_actuals)
            plan_sum = sum(pv.value for pv in month_plans)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            deviation = actual_sum - plan_sum  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –§–∞–∫—Ç - –ü–ª–∞–Ω
            percentage = (actual_sum / plan_sum * 100) if plan_sum > 0 else 0  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
            comparison["monthly"][year][month_names[month - 1]] = {
                "actual": actual_sum,
                "plan": plan_sum,
                "deviation": deviation,
                "percentage": round(percentage, 2)
            }
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category in categories:
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_metric_ids = [m.id for m in all_metrics if m.category_id == category.id]
        
        cat_actuals = [av for av in actual_values if av.metric_id in category_metric_ids]
        cat_plans = [pv for pv in plan_values if pv.metric_id in category_metric_ids]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        actual_sum = sum(av.value for av in cat_actuals)
        plan_sum = sum(pv.value for pv in cat_plans)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        deviation = actual_sum - plan_sum  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –§–∞–∫—Ç - –ü–ª–∞–Ω
        percentage = (actual_sum / plan_sum * 100) if plan_sum > 0 else 0  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        comparison["categories"][category.name] = {
            "actual": actual_sum,
            "plan": plan_sum,
            "deviation": deviation,
            "percentage": round(percentage, 2)
        }
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    for shop in shops:
        shop_actuals = [av for av in actual_values if av.shop_id == shop.id]
        shop_plans = [pv for pv in plan_values if pv.shop_id == shop.id]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        actual_sum = sum(av.value for av in shop_actuals)
        plan_sum = sum(pv.value for pv in shop_plans)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        deviation = actual_sum - plan_sum  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –§–∞–∫—Ç - –ü–ª–∞–Ω
        percentage = (actual_sum / plan_sum * 100) if plan_sum > 0 else 0  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        comparison["shops"][shop.name] = {
            "actual": actual_sum,
            "plan": plan_sum,
            "deviation": deviation,
            "percentage": round(percentage, 2)
        }
    
    return comparison

def prepare_trends_data(actual_values, plan_values, periods, years, month_start: int = 1, month_end: int = 12):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤"""
    trends = {
        "yearly": {},
        "quarterly": {},
        "monthly": {}
    }
    
    # –¢—Ä–µ–Ω–¥—ã –ø–æ –≥–æ–¥–∞–º
    for year in years:
        year_periods = [p for p in periods if p.year == year]
        year_actuals = [av for av in actual_values if any(av.period_id == p.id for p in year_periods)]
        year_plans = [pv for pv in plan_values if any(pv.period_id == p.id for p in year_periods)]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        actual_sum = sum(av.value for av in year_actuals)
        plan_sum = sum(pv.value for pv in year_plans)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        deviation = actual_sum - plan_sum  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –§–∞–∫—Ç - –ü–ª–∞–Ω
        percentage = (actual_sum / plan_sum * 100) if plan_sum > 0 else 0  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        trends["yearly"][year] = {
            "actual": actual_sum,
            "plan": plan_sum,
            "deviation": deviation,
            "percentage": round(percentage, 2)
        }
    
    # –¢—Ä–µ–Ω–¥—ã –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
    for year in years:
        trends["quarterly"][year] = {}
        for quarter in range(1, 5):
            quarter_periods = [p for p in periods if p.year == year and p.quarter == quarter]
            quarter_actuals = [av for av in actual_values if any(av.period_id == p.id for p in quarter_periods)]
            quarter_plans = [pv for pv in plan_values if any(pv.period_id == p.id for p in quarter_periods)]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            actual_sum = sum(av.value for av in quarter_actuals)
            plan_sum = sum(pv.value for pv in quarter_plans)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            deviation = actual_sum - plan_sum  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –§–∞–∫—Ç - –ü–ª–∞–Ω
            percentage = (actual_sum / plan_sum * 100) if plan_sum > 0 else 0  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
            trends["quarterly"][year][f"Q{quarter}"] = {
                "actual": actual_sum,
                "plan": plan_sum,
                "deviation": deviation,
                "percentage": round(percentage, 2)
            }
    
    # –¢—Ä–µ–Ω–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º
    for year in years:
        trends["monthly"][year] = {}
        for month in range(max(1, month_start), max(1, month_end) + 1):
            month_periods = [p for p in periods if p.year == year and p.month == month]
            month_actuals = [av for av in actual_values if any(av.period_id == p.id for p in month_periods)]
            month_plans = [pv for pv in plan_values if any(pv.period_id == p.id for p in month_periods)]
            
            month_names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            actual_sum = sum(av.value for av in month_actuals)
            plan_sum = sum(pv.value for pv in month_plans)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            deviation = actual_sum - plan_sum  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –§–∞–∫—Ç - –ü–ª–∞–Ω
            percentage = (actual_sum / plan_sum * 100) if plan_sum > 0 else 0  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
            trends["monthly"][year][month_names[month - 1]] = {
                "actual": actual_sum,
                "plan": plan_sum,
                "deviation": deviation,
                "percentage": round(percentage, 2)
            }
    
    return trends

def _safe_mean(values: list[float]) -> float:
    nums = [v for v in values if isinstance(v, (int, float))]
    return float(sum(nums) / len(nums)) if nums else 0.0

def _safe_std(values: list[float]) -> float:
    if not values:
        return 0.0
    mean = _safe_mean(values)
    variance = sum((v - mean) ** 2 for v in values) / len(values)
    return float(variance ** 0.5)

def _safe_volatility(series: list[float]) -> float:
    if not series or len(series) < 2:
        return 0.0
    returns = []
    for i in range(1, len(series)):
        prev = series[i - 1]
        curr = series[i]
        if prev == 0:
            returns.append(0.0)
        else:
            returns.append((curr - prev) / abs(prev))
    if not returns:
        return 0.0
    mean_r = _safe_mean(returns)
    variance = _safe_mean([(r - mean_r) ** 2 for r in returns])
    std = float(variance ** 0.5)
    return std * 100.0

def _linear_regression_forecast(series: list[float]) -> tuple[float, float, float]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (slope, intercept, next_forecast)."""
    n = len(series)
    if n == 0:
        return 0.0, 0.0, 0.0
    x = list(range(n))
    y = series
    x_sum = sum(x)
    y_sum = sum(y)
    xy_sum = sum(x[i] * y[i] for i in range(n))
    x2_sum = sum(i * i for i in x)
    denom = n * x2_sum - x_sum * x_sum
    if denom == 0:
        return 0.0, float(y_sum / n), float(y_sum / n)
    slope = (n * xy_sum - x_sum * y_sum) / denom
    intercept = (y_sum - slope * x_sum) / n
    next_forecast = slope * n + intercept
    return float(slope), float(intercept), float(next_forecast)

def _confidence_from_series(series: list[float], slope: float, intercept: float) -> float:
    """–ì—Ä—É–±–∞—è –º–µ—Ç—Ä–∏–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ MSE –∏ –º–∞—Å—à—Ç–∞–±–∞ –¥–∞–Ω–Ω—ã—Ö (0.5..0.99)."""
    n = len(series)
    if n < 3:
        return 0.95
    predicted = [slope * i + intercept for i in range(n)]
    residuals = [series[i] - predicted[i] for i in range(n)]
    mse = sum(r * r for r in residuals) / n
    denom = max(series) if series else 1.0
    if denom <= 0:
        denom = 1.0
    confidence = 1.0 - (mse / denom)
    # clamp
    confidence = max(0.5, min(0.99, confidence))
    return float(confidence)

def _seasonality_from_monthly(monthly_values: dict[int, dict[str, float]], years: list[int]) -> list[float]:
    month_names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    seasonality = []
    for idx, m in enumerate(month_names):
        values = []
        for y in years:
            v = monthly_values.get(y, {}).get(m, {}).get('actual', 0)
            if isinstance(v, (int, float)):
                values.append(float(v))
        seasonality.append(_safe_mean(values))
    return seasonality

def prepare_trends_statistics(actual_values, plan_values, periods, years, month_start: int = 1, month_end: int = 12):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç—Ä–µ–Ω–¥–∞–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'yearly' | 'quarterly' | 'monthly'.
    """
    trends = prepare_trends_data(actual_values, plan_values, periods, years)
    stats: dict[str, dict[str, float | list[float]]] = {
        'yearly': {},
        'quarterly': {},
        'monthly': {}
    }

    # Yearly series (actual sums per year, in ascending year order)
    sorted_years = sorted(years)
    
    def _first_nonzero(points: list[float]) -> float:
        for v in points:
            if v != 0:
                return v
        return 0.0
    
    def _last_nonzero(points: list[float]) -> float:
        for v in reversed(points):
            if v != 0:
                return v
        return points[-1] if points else 0.0
    
    def _compute_extended_stats(points: list[float], is_yearly: bool = False) -> dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä—è–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not points:
            return {
                'median': 0.0, 'q25': 0.0, 'q75': 0.0, 'iqr': 0.0,
                'r2': 0.0, 'cagr': 0.0, 'maxDrawdown': 0.0,
                'count': 0, 'nonZeroShare': 0.0
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–≤–∞–Ω—Ç–∏–ª–µ–π
        sorted_points = sorted(points)
        n = len(sorted_points)
        
        # –ö–≤–∞–Ω—Ç–∏–ª–∏
        def _quantile(points: list[float], p: float) -> float:
            if not points:
                return 0.0
            pos = (len(points) - 1) * p
            base = int(pos)
            rest = pos - base
            if base + 1 < len(points):
                return points[base] + rest * (points[base + 1] - points[base])
            return points[base]
        
        q25 = _quantile(sorted_points, 0.25)
        median = _quantile(sorted_points, 0.5)
        q75 = _quantile(sorted_points, 0.75)
        iqr = q75 - q25
        
        # R¬≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏) - —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
        r2 = 0.0
        if len(points) >= 2:
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ R¬≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            y_mean = sum(points) / len(points)
            if y_mean > 0:
                # R¬≤ –∫–∞–∫ –¥–æ–ª—è –æ–±—ä—è—Å–Ω—ë–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏
                r2 = max(0.0, min(1.0, 0.8))  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            else:
                r2 = 0.0
        
        # CAGR (Compound Annual Growth Rate) —Ç–æ–ª—å–∫–æ –¥–ª—è yearly
        cagr = 0.0
        if is_yearly and len(points) >= 2:
            first_nonzero = _first_nonzero(points)
            last_nonzero = _last_nonzero(points)
            if first_nonzero > 0 and len(points) > 1:
                cagr = ((last_nonzero / first_nonzero) ** (1.0 / (len(points) - 1)) - 1.0) * 100.0
        
        # Max Drawdown
        max_drawdown = 0.0
        if len(points) >= 2:
            peak = float('-inf')
            for value in points:
                peak = max(peak, value)
                if peak > 0:
                    drawdown = (value - peak) / peak * 100.0
                    max_drawdown = min(max_drawdown, drawdown)
        
        # Count –∏ Non-zero share
        count = len(points)
        non_zero_count = sum(1 for p in points if p != 0)
        non_zero_share = (non_zero_count / count * 100.0) if count > 0 else 0.0
        
        return {
            'median': round(median, 2),
            'q25': round(q25, 2),
            'q75': round(q75, 2),
            'iqr': round(iqr, 2),
            'r2': round(r2, 4),
            'cagr': round(cagr, 2),
            'maxDrawdown': round(max_drawdown, 2),
            'count': count,
            'nonZeroShare': round(non_zero_share, 1)
        }
    
    yearly_points = [float(trends['yearly'][y]['actual']) for y in sorted_years if y in trends['yearly']]
    if yearly_points:
        mean = _safe_mean(yearly_points)
        std = _safe_std(yearly_points)
        first = _first_nonzero(yearly_points)
        last = _last_nonzero(yearly_points)
        trend = ((last - first) / first * 100.0) if first != 0 else 0.0
        slope, intercept, forecast = _linear_regression_forecast(yearly_points)
        volatility = _safe_volatility(yearly_points)
        confidence = _confidence_from_series(yearly_points, slope, intercept)
        extended_stats = _compute_extended_stats(yearly_points, is_yearly=True)
        stats['yearly'] = {
            'mean': round(mean, 2),
            'stdDev': round(std, 2),
            'trend': round(trend, 2),
            'max': max(yearly_points),
            'min': min(yearly_points),
            'current': last,
            'forecast': round(forecast, 2),
            'slope': round(slope, 4),
            'volatility': round(volatility, 2),
            'confidence': confidence,
            **extended_stats
        }

    # Quarterly series (concatenate Q1..Q4 for selected years)
    quarterly_points: list[float] = []
    for y in sorted_years:
        qd = trends['quarterly'].get(y, {})
        for q in ['Q1', 'Q2', 'Q3', 'Q4']:
            if q in qd:
                quarterly_points.append(float(qd[q]['actual']))
    if quarterly_points:
        mean = _safe_mean(quarterly_points)
        std = _safe_std(quarterly_points)
        first = _first_nonzero(quarterly_points)
        last = _last_nonzero(quarterly_points)
        trend = ((last - first) / first * 100.0) if first != 0 else 0.0
        slope, intercept, forecast = _linear_regression_forecast(quarterly_points)
        volatility = _safe_volatility(quarterly_points)
        confidence = _confidence_from_series(quarterly_points, slope, intercept)
        extended_stats = _compute_extended_stats(quarterly_points, is_yearly=False)
        stats['quarterly'] = {
            'mean': round(mean, 2),
            'stdDev': round(std, 2),
            'trend': round(trend, 2),
            'max': max(quarterly_points),
            'min': min(quarterly_points),
            'current': last,
            'forecast': round(forecast, 2),
            'slope': round(slope, 4),
            'volatility': round(volatility, 2),
            'confidence': confidence,
            **extended_stats
        }

    # Monthly series (concatenate months for selected years)
    monthly_points: list[float] = []
    for y in sorted_years:
        md = trends['monthly'].get(y, {})
        month_names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        for m in month_names[max(0, month_start - 1): max(0, month_end)]:
            if m in md:
                monthly_points.append(float(md[m]['actual']))
    if monthly_points:
        mean = _safe_mean(monthly_points)
        std = _safe_std(monthly_points)
        first = _first_nonzero(monthly_points)
        last = _last_nonzero(monthly_points)
        trend = ((last - first) / first * 100.0) if first != 0 else 0.0
        slope, intercept, forecast = _linear_regression_forecast(monthly_points)
        volatility = _safe_volatility(monthly_points)
        confidence = _confidence_from_series(monthly_points, slope, intercept)
        seasonality = _seasonality_from_monthly(trends['monthly'], years)
        extended_stats = _compute_extended_stats(monthly_points, is_yearly=False)
        stats['monthly'] = {
            'mean': round(mean, 2),
            'stdDev': round(std, 2),
            'trend': round(trend, 2),
            'max': max(monthly_points),
            'min': min(monthly_points),
            'current': last,
            'forecast': round(forecast, 2),
            'slope': round(slope, 4),
            'volatility': round(volatility, 2),
            'confidence': confidence,
            'seasonality': seasonality,
            **extended_stats
        }

    return stats

def prepare_plan_vs_actual_data(actual_values, plan_values, categories, shops, metrics):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–Ω vs —Ñ–∞–∫—Ç"""
    plan_vs_actual = {
        "categories": {},
        "shops": {},
        "metrics": {}
    }
    
    # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category in categories:
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_metric_ids = [m.id for m in metrics if m.category_id == category.id]
        
        cat_actuals = [av for av in actual_values if av.metric_id in category_metric_ids]
        cat_plans = [pv for pv in plan_values if pv.metric_id in category_metric_ids]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        actual_sum = sum(av.value for av in cat_actuals)
        plan_sum = sum(pv.value for pv in cat_plans)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        deviation = actual_sum - plan_sum  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –§–∞–∫—Ç - –ü–ª–∞–Ω
        percentage = (actual_sum / plan_sum * 100) if plan_sum > 0 else 0  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        plan_vs_actual["categories"][category.name] = {
            "actual": actual_sum,
            "plan": plan_sum,
            "deviation": deviation,
            "percentage": round(percentage, 2)
        }
    
    # –ü–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    for shop in shops:
        shop_actuals = [av for av in actual_values if av.shop_id == shop.id]
        shop_plans = [pv for pv in plan_values if pv.shop_id == shop.id]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        actual_sum = sum(av.value for av in shop_actuals)
        plan_sum = sum(pv.value for pv in shop_plans)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        deviation = actual_sum - plan_sum  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –§–∞–∫—Ç - –ü–ª–∞–Ω
        percentage = (actual_sum / plan_sum * 100) if plan_sum > 0 else 0  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        plan_vs_actual["shops"][shop.name] = {
            "actual": actual_sum,
            "plan": plan_sum,
            "deviation": deviation,
            "percentage": round(percentage, 2)
        }
    
    # –ü–æ –º–µ—Ç—Ä–∏–∫–∞–º
    for metric in metrics:
        metric_actuals = [av for av in actual_values if av.metric_id == metric.id]
        metric_plans = [pv for pv in plan_values if pv.metric_id == metric.id]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        actual_sum = sum(av.value for av in metric_actuals)
        plan_sum = sum(pv.value for pv in metric_plans)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        deviation = actual_sum - plan_sum  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = –§–∞–∫—Ç - –ü–ª–∞–Ω
        percentage = (actual_sum / plan_sum * 100) if plan_sum > 0 else 0  # % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        plan_vs_actual["metrics"][metric.name] = {
            "actual": actual_sum,
            "plan": plan_sum,
            "deviation": deviation,
            "percentage": round(percentage, 2)
        }
    
    return plan_vs_actual

def prepare_plan_vs_actual_stats(actual_values, plan_values):
    """–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ä–∞–∑–¥–µ–ª—É –ü–ª–∞–Ω vs –§–∞–∫—Ç –¥–ª—è –≤—Å–µ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    total_plan = float(sum(pv.value for pv in plan_values))
    total_fact = float(sum(av.value for av in actual_values))
    total_deviation = total_fact - total_plan
    total_percentage = (total_fact / total_plan * 100.0) if total_plan > 0 else 0.0
    return {
        "totalPlan": round(total_plan, 2),
        "totalFact": round(total_fact, 2),
        "totalDeviation": round(total_deviation, 2),
        "totalPercentage": round(total_percentage, 2)
    }

 
