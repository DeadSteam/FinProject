import React, { Suspense } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { ThemeProvider } from './context/ThemeContext.js';

import PrivateRoute from './components/common/PrivateRoute';
import AdminLayout from './components/layout/AdminLayout';
import Layout from './components/layout/Layout';
import { AppProvider } from './context/AppContext';
import { AppStateProvider } from './context/AppStateContext';
import { ServiceProvider } from './context/ServiceContext';
import { useAuthStatus, useAuthInitialization } from './context/auth';
import LoadingSpinner from './components/common/LoadingSpinner';
import './styles/globals.css';
import './components/toast/ToastStyles.css';
// Phase 4: Performance Optimization
// Lazy-load all pages except for Login and NotFound.
const Dashboard = React.lazy(() => import('./pages/Dashboard'));
const FinanceDetails = React.lazy(() => import('./pages/FinanceDetails'));
const Login = React.lazy(() => import('./pages/Login'));
const NotFound = React.lazy(() => import('./pages/NotFound'));
const Profile = React.lazy(() => import('./pages/Profile'));
const Settings = React.lazy(() => import('./pages/Settings'));
const Analytics = React.lazy(() => import('./pages/Analytics'));
const Reports = React.lazy(() => import('./pages/Reports'));

// Phase 10 Task 10.2: Lazy Loading –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
// –≠—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
const AdminDashboard = React.lazy(() => import('./pages/admin/AdminDashboard'));
const AdminUsers = React.lazy(() => import('./pages/admin/AdminUsers'));
const AdminShops = React.lazy(() => import('./pages/admin/AdminShops'));
const AdminCategories = React.lazy(() => import('./pages/admin/AdminCategories'));
const AdminMetrics = React.lazy(() => import('./pages/admin/AdminMetrics'));
const AdminYearlyPlans = React.lazy(() => import('./pages/admin/AdminYearlyPlans'));

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è Suspense —Å –∫—Ä–∞—Å–∏–≤—ã–º loading
const SuspenseWrapper = ({ children }) => (
  <Suspense fallback={
    <div style={{ 
      display: 'flex', 
      justifyContent: 'center', 
      alignItems: 'center', 
      height: '60vh',
      flexDirection: 'column',
      gap: '1rem'
    }}>
      <div className="loading-spinner" style={{ 
        width: '40px', 
        height: '40px', 
        border: '4px solid #f3f3f3',
        borderTop: '4px solid #007bff',
        borderRadius: '50%',
        animation: 'spin 1s linear infinite'
      }}></div>
      <div style={{ color: '#666', fontSize: '14px' }}>
        –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è...
      </div>
    </div>
  }>
    {children}
  </Suspense>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

// –°—Ç—Ä–∞–Ω–∏—Ü—ã

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

// 404 —Å—Ç—Ä–∞–Ω–∏—Ü–∞

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º)
function PublicRoute({ children }) {
  const { isAuthenticated, isLoading } = useAuthStatus();
  
  if (isLoading) {
    return <LoadingSpinner />;
  }
  
  // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
  if (isAuthenticated) {
    return <Navigate to="/" replace />;
  }
  
  return children;
}

function AppRoutesComponent() {
  const { isAuthenticated, isLoading, user } = useAuthStatus();
  const { initializeAuth } = useAuthInitialization();
  const initializeRef = React.useRef(false);
  const [forceShowContent, setForceShowContent] = React.useState(false);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  React.useEffect(() => {
    const timer = setTimeout(() => {
      setForceShowContent(true);
    }, 5000);

    return () => clearTimeout(timer);
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  React.useEffect(() => {
    if (!initializeRef.current) {
      initializeRef.current = true;
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const initWithTimeout = async () => {
        try {
          await Promise.race([
            initializeAuth(),
            new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 3000))
          ]);
        } catch (error) {
          console.error('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è auth –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π:', error);
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        }
      };
      initWithTimeout();
    }
  }, [initializeAuth]); // –£–±–∏—Ä–∞–µ–º initializeAuth –∏–∑ dependencies

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  if (isLoading && !forceShowContent) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        fontSize: '18px'
      }}>
        üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...
      </div>
    );
  }

  return (
    <Routes>
      {/* –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö) */}
      <Route path="/login" element={
        <PublicRoute>
          <SuspenseWrapper><Login /></SuspenseWrapper>
        </PublicRoute>
      } />
            
      {/* –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
      <Route path="/" element={
        <PrivateRoute>
          <Layout>
            <SuspenseWrapper><Dashboard /></SuspenseWrapper>
          </Layout>
        </PrivateRoute>
      } />
      
      <Route path="/profile" element={
        <PrivateRoute>
          <Layout>
            <SuspenseWrapper><Profile /></SuspenseWrapper>
          </Layout>
        </PrivateRoute>
      } />
      
      <Route path="/finance-details" element={
        <PrivateRoute>
          <Layout>
            <SuspenseWrapper><FinanceDetails /></SuspenseWrapper>
          </Layout>
        </PrivateRoute>
      } />
      
      <Route path="/settings" element={
        <PrivateRoute>
          <Layout>
            <SuspenseWrapper><Settings /></SuspenseWrapper>
          </Layout>
        </PrivateRoute>
      } />
      
      <Route path="/analytics" element={
        <PrivateRoute>
          <Layout>
            <SuspenseWrapper><Analytics /></SuspenseWrapper>
          </Layout>
        </PrivateRoute>
      } />
      
      <Route path="/reports" element={
        <PrivateRoute>
          <Layout>
            <SuspenseWrapper><Reports /></SuspenseWrapper>
          </Layout>
        </PrivateRoute>
      } />
      
      {/* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
      <Route path="/admin/*" element={
        <PrivateRoute requiredRole="admin">
          <AdminLayout />
        </PrivateRoute>
      }>
        <Route index element={<Navigate to="/admin/dashboard" replace />} />
        <Route path="dashboard" element={<SuspenseWrapper><AdminDashboard /></SuspenseWrapper>} />
        <Route path="users" element={<SuspenseWrapper><AdminUsers /></SuspenseWrapper>} />
        <Route path="shops" element={<SuspenseWrapper><AdminShops /></SuspenseWrapper>} />
        <Route path="categories" element={<SuspenseWrapper><AdminCategories /></SuspenseWrapper>} />
        <Route path="metrics" element={<SuspenseWrapper><AdminMetrics /></SuspenseWrapper>} />
        <Route path="yearly-plans" element={<SuspenseWrapper><AdminYearlyPlans /></SuspenseWrapper>} />
      </Route>
      
      {/* –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
      <Route path="*" element={
        isAuthenticated ? <SuspenseWrapper><NotFound /></SuspenseWrapper> : <Navigate to="/login" replace />
      } />
    </Routes>
  );
}

function App() {
  return (
    <ThemeProvider>
      <AppProvider>
        <AppStateProvider>
          <ServiceProvider>
            <Router future={{ v7_startTransition: true, v7_relativeSplatPath: true }}>
              <AppRoutesComponent />
            </Router>
          </ServiceProvider>
        </AppStateProvider>
      </AppProvider>
    </ThemeProvider>
  );
}

export default App;
