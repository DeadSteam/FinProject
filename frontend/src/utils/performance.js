/**
 * Performance —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Context'–æ–≤ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ-—Ä–µ–Ω–¥–µ—Ä—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 * 
 * ‚ö†Ô∏è –í–ê–ñ–ù–û: –í—Å–µ debug —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ development
 * –í production —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è no-op –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ overhead
 */

import React, { useRef, useEffect } from 'react';

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ development —Ä–µ–∂–∏–º–∞
const isDevelopment = () => {
    if (typeof window !== 'undefined') {
        return window.location.hostname === 'localhost' && ['3000', '3001'].includes(window.location.port);
    }
    return false;
};

const dev = isDevelopment();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ
const devLog = (...args) => {
  if (dev) {
    console.log(...args);
  }
};

const devWarn = (...args) => {
  if (dev) {
    console.warn(...args);
  }
};

const devError = (...args) => {
  if (dev) {
    console.error(...args);
  }
};

const devGroup = (...args) => {
  if (dev) {
    console.group(...args);
  }
};

const devGroupEnd = () => {
  if (dev) {
    console.groupEnd();
  }
};

/**
 * –•—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {string} componentName - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {object} props - –ø—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
export const useRenderTracker = (componentName, props = {}) => {
  // –í production - no-op
  if (!dev) {
    return 0;
  }

  const renderCount = useRef(0);
  const prevProps = useRef(props);

  useEffect(() => {
    renderCount.current += 1;
    
    devGroup(`üîÑ ${componentName} render #${renderCount.current}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—Å–æ–≤
    const changedProps = {};
    const currentProps = props;
    
    Object.keys(currentProps).forEach(key => {
      if (prevProps.current[key] !== currentProps[key]) {
        changedProps[key] = {
          from: prevProps.current[key],
          to: currentProps[key]
        };
      }
    });
    
    if (Object.keys(changedProps).length > 0) {
      devLog('üìã Changed props:', changedProps);
    } else {
      devWarn('‚ö†Ô∏è Re-render without prop changes');
    }
    
    devGroupEnd();
    prevProps.current = props;
  });

  return renderCount.current;
};

/**
 * –•—É–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Context –∑–Ω–∞—á–µ–Ω–∏–π
 * @param {string} contextName - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @param {any} contextValue - –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export const useContextTracker = (contextName, contextValue) => {
  // –í production - no-op
  if (!dev) {
    return 0;
  }

  const prevValue = useRef(contextValue);
  const changeCount = useRef(0);

  useEffect(() => {
    if (prevValue.current !== contextValue) {
      changeCount.current += 1;
      
      devGroup(`üîÑ ${contextName} Context change #${changeCount.current}`);
      devLog('üìã Previous value:', prevValue.current);
      devLog('üìã New value:', contextValue);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
      if (typeof contextValue === 'object' && contextValue !== null) {
        const changes = analyzeObjectChanges(prevValue.current, contextValue);
        if (changes.length > 0) {
          devLog('üîç Object changes:', changes);
        }
      }
      
      devGroupEnd();
      prevValue.current = contextValue;
    }
  });

  return changeCount.current;
};

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–µ (—Ç–æ–ª—å–∫–æ –≤ development)
 * @param {object} prevObj - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—ä–µ–∫—Ç
 * @param {object} newObj - –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
 * @returns {Array} - –º–∞—Å—Å–∏–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
const analyzeObjectChanges = (prevObj, newObj) => {
  if (!dev) return [];
  
  const changes = [];
  
  if (!prevObj || !newObj) return changes;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö
  const allKeys = new Set([...Object.keys(prevObj), ...Object.keys(newObj)]);
  
  allKeys.forEach(key => {
    const prevValue = prevObj[key];
    const newValue = newObj[key];
    
    if (prevValue !== newValue) {
      changes.push({
        key,
        type: prevValue === undefined ? 'added' : 
              newValue === undefined ? 'removed' : 'changed',
        from: prevValue,
        to: newValue
      });
    }
  });
  
  return changes;
};

/**
 * –•—É–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
 * @param {string} operationName - –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export const usePerformanceProfiler = (operationName) => {
  // –í production - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  if (!dev) {
    return {
      startMeasurement: () => {},
      endMeasurement: () => 0
    };
  }

  const startTime = useRef(null);
  const measurements = useRef([]);

  const startMeasurement = () => {
    startTime.current = performance.now();
  };

  const endMeasurement = () => {
    if (startTime.current) {
      const duration = performance.now() - startTime.current;
      measurements.current.push(duration);
      
      devLog(`‚è±Ô∏è ${operationName}: ${duration.toFixed(2)}ms`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
      if (measurements.current.length % 10 === 0) {
        const avg = measurements.current.reduce((a, b) => a + b, 0) / measurements.current.length;
        const max = Math.max(...measurements.current);
        const min = Math.min(...measurements.current);
        
        devGroup(`üìä ${operationName} Performance Stats (${measurements.current.length} samples)`);
        devLog(`Average: ${avg.toFixed(2)}ms`);
        devLog(`Max: ${max.toFixed(2)}ms`);
        devLog(`Min: ${min.toFixed(2)}ms`);
        devGroupEnd();
      }
      
      startTime.current = null;
      return duration;
    }
    return 0;
  };

  return { startMeasurement, endMeasurement };
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @param {React.Component} WrappedComponent - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±–µ—Ä—Ç–∫–∏
 * @param {string} componentName - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export const withPerformanceTracker = (WrappedComponent, componentName) => {
  // –í production - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏
  if (!dev) {
    return WrappedComponent;
  }

  return function PerformanceTrackedComponent(props) {
    useRenderTracker(componentName || WrappedComponent.name || 'Unknown', props);
    
    return <WrappedComponent {...props} />;
  };
};

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ Context value (—Ç–æ–ª—å–∫–æ –≤ development)
 * @param {any} value - –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
 * @returns {number} - —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π)
 */
export const measureContextSize = (value) => {
  if (!dev) return 0;
  
  try {
    const serialized = JSON.stringify(value);
    return new Blob([serialized]).size;
  } catch (error) {
    devWarn('Unable to measure context size:', error);
    return 0;
  }
};

/**
 * –•—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ Context
 * @param {string} contextName - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @param {any} contextValue - –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export const useContextSizeTracker = (contextName, contextValue) => {
  // –í production - no-op
  if (!dev) {
    return 0;
  }

  const prevSize = useRef(0);

  useEffect(() => {
    const currentSize = measureContextSize(contextValue);
    
    if (currentSize !== prevSize.current) {
      const sizeDiff = currentSize - prevSize.current;
      const sizeChangeType = sizeDiff > 0 ? 'increased' : 'decreased';
      
      devGroup(`üìè ${contextName} Context size ${sizeChangeType}`);
      devLog(`Size: ${currentSize} bytes (${sizeDiff > 0 ? '+' : ''}${sizeDiff})`);
      
      if (currentSize > 10000) { // 10KB
        devWarn('‚ö†Ô∏è Large context size detected! Consider optimization.');
      }
      
      devGroupEnd();
      prevSize.current = currentSize;
    }
  });

  return prevSize.current;
};

/**
 * –°–æ–∑–¥–∞–µ—Ç Context Profiler –¥–ª—è –∑–∞–º–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @param {string} id - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞
 * @param {Function} onRender - –∫–æ–ª–ª–±–µ–∫ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ
 */
export const createContextProfiler = (id, onRender) => {
  // –í production - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º children –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  if (!dev) {
    return function NoOpProfiler({ children }) {
      return children;
    };
  }

  return function ContextProfiler({ children }) {
    const handleRender = (id, phase, actualDuration, baseDuration, startTime, commitTime) => {
      const isLogsEnabled = typeof window !== 'undefined' && window.__ENABLE_PERF_LOGS__;
      if (isLogsEnabled) {
        devGroup(`‚ö° Context Profiler: ${id}`);
        devLog(`Phase: ${phase}`);
        devLog(`Actual duration: ${actualDuration.toFixed(2)}ms`);
        devLog(`Base duration: ${baseDuration.toFixed(2)}ms`);
        devGroupEnd();
      }
      
      if (onRender) {
        onRender(id, phase, actualDuration, baseDuration, startTime, commitTime);
      }
    };

    return (
      <React.Profiler id={id} onRender={handleRender}>
        {children}
      </React.Profiler>
    );
  };
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Context
 * @param {Object} options - –æ–ø—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export const createOptimizedContextValue = (options = {}) => {
  const { 
    enableMemoization = true, 
    enableSizeTracking = false,
    maxSize = 50000 // 50KB
  } = options;
  
  return function useOptimizedContextValue(valueFactory) {
    const memoizedValue = React.useMemo(() => {
      const value = valueFactory();
      
      // –†–∞–∑–º–µ—Ä —Ç—Ä–µ–∫–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –≤ development
      if (enableSizeTracking && dev) {
        const size = measureContextSize(value);
        if (size > maxSize) {
          devWarn(`Context value size (${size}B) exceeds maximum (${maxSize}B)`);
        }
      }
      
      return value;
    }, [valueFactory]);

    return enableMemoization ? memoizedValue : valueFactory();
  };
};

/**
 * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö Context'–æ–≤
 */
export const debugAllContexts = () => {
  if (!dev) return;
  
  devGroup('üîç Context Debug Info');
  devLog('Use individual context trackers for detailed analysis');
  devGroupEnd();
};

/**
 * Phase 10 Task 10.4: –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * 
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

/**
 * HOC –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–Ω–¥–µ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * @param {React.Component} WrappedComponent - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} componentName - –∏–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const withPerformanceProfiler = (WrappedComponent, componentName = 'Component') => {
  // –í production - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  if (!dev) {
    return WrappedComponent;
  }

  return React.memo((props) => {
    const renderStartTime = React.useRef(null);
    
    // –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–µ–Ω–¥–µ—Ä–∞
    renderStartTime.current = performance.now();
    
    React.useEffect(() => {
      const renderEndTime = performance.now();
      const renderTime = renderEndTime - renderStartTime.current;
      
      if (renderTime > 16) { // –ë–æ–ª–µ–µ 1 frame (16ms)
        devWarn(`üêå ${componentName} render took ${renderTime.toFixed(2)}ms`);
      } else {
        devLog(`‚ö° ${componentName} render took ${renderTime.toFixed(2)}ms`);
      }
    });
    
    return <WrappedComponent {...props} />;
  });
};

/**
 * Hook –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
 * @param {string} operationName - –∏–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export const usePerformanceTimer = (operationName) => {
  // –í production - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
  if (!dev) {
    return React.useCallback(() => {
      return {
        end: () => 0
      };
    }, [operationName]);
  }

  const startTimer = React.useCallback(() => {
    const startTime = performance.now();
    
    return {
      end: () => {
        const endTime = performance.now();
        const duration = endTime - startTime;
        
        devLog(`‚è±Ô∏è ${operationName}: ${duration.toFixed(2)}ms`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        if (window.gtag) {
          window.gtag('event', 'timing_complete', {
            name: operationName,
            value: Math.round(duration)
          });
        }
        
        return duration;
      }
    };
  }, [operationName]);
  
  return startTimer;
};

/**
 * Hook –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export const usePerformanceMonitor = () => {
  // –í production - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  if (!dev) {
    return {
      metrics: { memory: null, timing: null, connection: null },
      logMetrics: () => {}
    };
  }

  const [metrics, setMetrics] = React.useState({
    memory: null,
    timing: null,
    connection: null
  });
  
  React.useEffect(() => {
    const updateMetrics = () => {
      const newMetrics = {};
      
      // Memory API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      if (performance.memory) {
        newMetrics.memory = {
          used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024),
          total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024),
          limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024)
        };
      }
      
      // Navigation Timing API
      if (performance.timing) {
        const {timing} = performance;
        newMetrics.timing = {
          domContentLoaded: timing.domContentLoadedEventEnd - timing.navigationStart,
          loadComplete: timing.loadEventEnd - timing.navigationStart,
          domReady: timing.domComplete - timing.navigationStart
        };
      }
      
      // Network Information API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      if (navigator.connection) {
        newMetrics.connection = {
          effectiveType: navigator.connection.effectiveType,
          downlink: navigator.connection.downlink,
          rtt: navigator.connection.rtt
        };
      }
      
      setMetrics(newMetrics);
    };
    
    updateMetrics();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(updateMetrics, 30000);
    
    return () => clearInterval(interval);
  }, []);
  
  const logMetrics = React.useCallback(() => {
    devGroup('üìä Performance Metrics');
    
    if (metrics.memory) {
      devLog(`üß† Memory: ${metrics.memory.used}MB / ${metrics.memory.total}MB (limit: ${metrics.memory.limit}MB)`);
    }
    
    if (metrics.timing) {
      devLog(`‚è±Ô∏è Timing: DOM ${metrics.timing.domReady}ms, Load ${metrics.timing.loadComplete}ms`);
    }
    
    if (metrics.connection) {
      devLog(`üåê Network: ${metrics.connection.effectiveType}, ${metrics.connection.downlink}Mbps, RTT ${metrics.connection.rtt}ms`);
    }
    
    devGroupEnd();
  }, [metrics]);
  
  return { metrics, logMetrics };
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ development
 */
export const PerformanceMonitor = React.memo(() => {
  // –í production - –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –Ω–∏—á–µ–≥–æ
  if (!dev) {
    return null;
  }

  const { metrics, logMetrics } = usePerformanceMonitor();
  
  return (
    <div style={{
      position: 'fixed',
      bottom: '10px',
      right: '10px',
      background: 'rgba(0,0,0,0.8)',
      color: 'white',
      padding: '10px',
      borderRadius: '5px',
      fontSize: '12px',
      fontFamily: 'monospace',
      zIndex: 9999,
      maxWidth: '300px'
    }}>
      <div style={{ marginBottom: '5px', fontWeight: 'bold' }}>
        Performance Monitor
        <button 
          onClick={logMetrics}
          style={{
            marginLeft: '10px',
            background: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '3px',
            padding: '2px 6px',
            fontSize: '10px',
            cursor: 'pointer'
          }}
        >
          Log
        </button>
      </div>
      
      {metrics.memory && (
        <div>üß† Memory: {metrics.memory.used}MB / {metrics.memory.total}MB</div>
      )}
      
      {metrics.timing && (
        <div>‚è±Ô∏è Load: {metrics.timing.loadComplete}ms</div>
      )}
      
      {metrics.connection && (
        <div>üåê Network: {metrics.connection.effectiveType}</div>
      )}
    </div>
  );
});

/**
 * Utility –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è LCP (Largest Contentful Paint)
 */
export const measureLCP = () => {
  // –í production - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –±–µ–∑ –∏–∑–º–µ—Ä–µ–Ω–∏—è
  if (!dev) {
    return Promise.resolve(null);
  }

  return new Promise((resolve) => {
    if (!window.PerformanceObserver) {
      resolve(null);
      return;
    }
    
    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      const lastEntry = entries[entries.length - 1];
      
      devLog(`üéØ LCP: ${lastEntry.startTime.toFixed(2)}ms`);
      
      resolve(lastEntry.startTime);
      observer.disconnect();
    });
    
    observer.observe({ entryTypes: ['largest-contentful-paint'] });
    
    // Timeout –ø–æ—Å–ª–µ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      observer.disconnect();
      resolve(null);
    }, 10000);
  });
};

/**
 * Utility –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è FID (First Input Delay)
 */
export const measureFID = () => {
  // –í production - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –±–µ–∑ –∏–∑–º–µ—Ä–µ–Ω–∏—è
  if (!dev) {
    return Promise.resolve(null);
  }

  return new Promise((resolve) => {
    if (!window.PerformanceObserver) {
      resolve(null);
      return;
    }
    
    const observer = new PerformanceObserver((list) => {
      const firstInput = list.getEntries()[0];
      
      if (firstInput) {
        const fid = firstInput.processingStart - firstInput.startTime;
        devLog(`üëÜ FID: ${fid.toFixed(2)}ms`);
        
        resolve(fid);
        observer.disconnect();
      }
    });
    
    observer.observe({ entryTypes: ['first-input'] });
    
    // Timeout –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      observer.disconnect();
      resolve(null);
    }, 30000);
  });
};

/**
 * Comprehensive performance audit
 */
export const runPerformanceAudit = async () => {
  // –í production - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞
  if (!dev) {
    return {
      timestamp: new Date().toISOString(),
      environment: 'production'
    };
  }

  devGroup('üöÄ Performance Audit');
  
  const results = {
    lcp: await measureLCP(),
    fid: await measureFID(),
    timestamp: new Date().toISOString()
  };
  
  // Bundle size analysis
  if (performance.getEntriesByType) {
    const navigationEntries = performance.getEntriesByType('navigation');
    if (navigationEntries.length > 0) {
      const nav = navigationEntries[0];
      results.timing = {
        dns: nav.domainLookupEnd - nav.domainLookupStart,
        tcp: nav.connectEnd - nav.connectStart,
        request: nav.responseStart - nav.requestStart,
        response: nav.responseEnd - nav.responseStart,
        domParsing: nav.domComplete - nav.responseEnd,
        total: nav.loadEventEnd - nav.navigationStart
      };
    }
  }
  
  devLog('Performance Results:', results);
  devGroupEnd();
  
  return results;
};

