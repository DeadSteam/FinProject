import { createContext, useContext } from 'react';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
const STORAGE_KEYS = {
  TOKEN: 'authToken',
  REFRESH_TOKEN: 'refreshToken',
  USER: 'currentUser'
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
const TOKEN_ACTIONS = {
  SET_TOKENS: 'SET_TOKENS',
  CLEAR_TOKENS: 'CLEAR_TOKENS',
  UPDATE_TOKEN: 'UPDATE_TOKEN'
};

/**
 * PerformanceTracker - –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (SRP)
 */
export class PerformanceTracker {
  constructor(componentName) {
    this.componentName = componentName;
    this.operations = {};
    this.totalCalls = 0;
    this.isEnabled = process.env.NODE_ENV === 'development';
  }

  measureOperation(operationName, fn) {
    if (!this.isEnabled) {
      return fn();
    }

    const start = performance.now();
    const result = fn();
    const duration = performance.now() - start;
    
    if (!this.operations[operationName]) {
      this.operations[operationName] = {
        count: 0,
        totalDuration: 0,
        averageDuration: 0,
        maxDuration: 0,
        minDuration: Infinity
      };
    }
    
    const op = this.operations[operationName];
    op.count++;
    op.totalDuration += duration;
    op.averageDuration = op.totalDuration / op.count;
    op.maxDuration = Math.max(op.maxDuration, duration);
    op.minDuration = Math.min(op.minDuration, duration);
    
    this.totalCalls++;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (duration > 10 && process.env.NODE_ENV === 'development') {
      console.warn(`üêå Slow ${this.componentName} operation: ${operationName} took ${duration.toFixed(2)}ms`);
    }
    
    return result;
  }

  showStats() {
    if (!this.isEnabled || process.env.NODE_ENV !== 'development') return;
    
    console.group(`üìä ${this.componentName} Performance Stats`);
    console.log('Total operations:', this.totalCalls);
    
    Object.entries(this.operations).forEach(([name, stats]) => {
      console.log(`${name}:`, {
        calls: stats.count,
        avgDuration: `${stats.averageDuration.toFixed(2)}ms`,
        maxDuration: `${stats.maxDuration.toFixed(2)}ms`,
        minDuration: `${stats.minDuration.toFixed(2)}ms`
      });
    });
    
    console.groupEnd();
  }

  reset() {
    this.operations = {};
    this.totalCalls = 0;
  }
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Ç–æ–∫–µ–Ω–æ–≤ (DIP - Dependency Inversion Principle)
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–º–µ–Ω—è—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
 */
export class ITokenStorage {
  setItem(key, value) {
    throw new Error('setItem method must be implemented');
  }
  
  getItem(key) {
    throw new Error('getItem method must be implemented');
  }
  
  removeItem(key) {
    throw new Error('removeItem method must be implemented');
  }
  
  clear() {
    throw new Error('clear method must be implemented');
  }
}

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ localStorage
 */
export class LocalStorageTokenStorage extends ITokenStorage {
  setItem(key, value) {
    localStorage.setItem(key, value);
  }
  
  getItem(key) {
    return localStorage.getItem(key);
  }
  
  removeItem(key) {
    localStorage.removeItem(key);
  }
  
  clear() {
    localStorage.removeItem(STORAGE_KEYS.TOKEN);
    localStorage.removeItem(STORAGE_KEYS.REFRESH_TOKEN);
    localStorage.removeItem(STORAGE_KEYS.USER);
  }
}

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ sessionStorage (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
 */
export class SessionStorageTokenStorage extends ITokenStorage {
  setItem(key, value) {
    sessionStorage.setItem(key, value);
  }
  
  getItem(key) {
    return sessionStorage.getItem(key);
  }
  
  removeItem(key) {
    sessionStorage.removeItem(key);
  }
  
  clear() {
    sessionStorage.removeItem(STORAGE_KEYS.TOKEN);
    sessionStorage.removeItem(STORAGE_KEYS.REFRESH_TOKEN);
    sessionStorage.removeItem(STORAGE_KEYS.USER);
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ç–æ—Ä JWT —Ç–æ–∫–µ–Ω–æ–≤ (SRP - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å)
 */
export class TokenValidator {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞
   * @param {string} token - JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {boolean} - true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
   */
  static isValid(token) {
    if (!token || typeof token !== 'string') {
      return false;
    }

    try {
      const parts = token.split('.');
      if (parts.length !== 3) {
        return false;
      }

      const payload = JSON.parse(atob(parts[1]));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
      if (payload.exp && Date.now() >= payload.exp * 1000) {
        return false;
      }

      return true;
    } catch (error) {
      console.warn('TokenValidator: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç payload –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
   * @param {string} token - JWT —Ç–æ–∫–µ–Ω
   * @returns {object|null} - payload —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  static getPayload(token) {
    if (!this.isValid(token)) {
      return null;
    }

    try {
      const parts = token.split('.');
      return JSON.parse(atob(parts[1]));
    } catch (error) {
      console.warn('TokenValidator: –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è payload:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
   * @param {string} token - JWT —Ç–æ–∫–µ–Ω
   * @param {number} minutesThreshold - –ø–æ—Ä–æ–≥ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
   * @returns {boolean} - true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç
   */
  static isExpiringSoon(token, minutesThreshold = 5) {
    const payload = this.getPayload(token);
    if (!payload || !payload.exp) {
      return false;
    }

    const expirationTime = payload.exp * 1000;
    const now = Date.now();
    const timeToExpiration = expirationTime - now;
    const thresholdMs = minutesThreshold * 60 * 1000;

    return timeToExpiration <= thresholdMs;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * @param {string} token - JWT —Ç–æ–∫–µ–Ω
   * @returns {number|null} - –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–ª–∏ null
   */
  static getTimeToExpiration(token) {
    const payload = this.getPayload(token);
    if (!payload || !payload.exp) {
      return null;
    }

    const expirationTime = payload.exp * 1000;
    const now = Date.now();
    
    return Math.max(0, expirationTime - now);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
   * @param {string} token - JWT —Ç–æ–∫–µ–Ω
   * @returns {object|null} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ null
   */
  static getUserFromToken(token) {
    const payload = this.getPayload(token);
    if (!payload) {
      return null;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT
    return {
      id: payload.sub || payload.userId || payload.user_id,
      email: payload.email,
      firstName: payload.firstName || payload.first_name,
      lastName: payload.lastName || payload.last_name,
      role: payload.role || payload.userRole || 'user',
      permissions: payload.permissions || [],
      isAdmin: payload.isAdmin || payload.is_admin || false,
      exp: payload.exp,
      iat: payload.iat
    };
  }
}

/**
 * TokenManager - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ (SRP + DI + OCP)
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
 * - SRP: –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏
 * - OCP: —Ä–∞—Å—à–∏—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
 * - LSP: –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è—é—Ç –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
 * - ISP: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
 * - DIP: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
 */
export class TokenManager {
  /**
   * @param {ITokenStorage} storage - —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ (DI)
   * @param {PerformanceTracker} performanceTracker - —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  constructor(storage, performanceTracker = null) {
    if (!storage || typeof storage.setItem !== 'function') {
      throw new Error('TokenManager requires valid storage implementation');
    }
    
    this.storage = storage;
    this.performanceTracker = performanceTracker || new PerformanceTracker('TokenManager');
    this.observers = new Set(); // –î–ª—è Observer pattern
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    this._validateStorageInterface(storage);
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Contract validation)
   */
  _validateStorageInterface(storage) {
    const requiredMethods = ['setItem', 'getItem', 'removeItem', 'clear'];
    const missingMethods = requiredMethods.filter(method => typeof storage[method] !== 'function');
    
    if (missingMethods.length > 0) {
      throw new Error(`Storage implementation missing methods: ${missingMethods.join(', ')}`);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   * @param {object} tokens - –æ–±—ä–µ–∫—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏
   * @param {string} tokens.token - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω
   * @param {string} tokens.refreshToken - —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  setTokens({ token, refreshToken }) {
    const operation = () => {
      if (!token) {
        throw new Error('Token is required');
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      if (!TokenValidator.isValid(token)) {
        throw new Error('Invalid token provided');
      }

      this.storage.setItem(STORAGE_KEYS.TOKEN, token);
      
      if (refreshToken) {
        this.storage.setItem(STORAGE_KEYS.REFRESH_TOKEN, refreshToken);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
      const userInfo = TokenValidator.getUserFromToken(token);
      if (userInfo) {
        this.storage.setItem(STORAGE_KEYS.USER, JSON.stringify(userInfo));
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
      this._notifyTokenChange(TOKEN_ACTIONS.SET_TOKENS, { token, refreshToken, user: userInfo });
      
      return true;
    };

    return this.performanceTracker.measureOperation('setTokens', operation);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
   * @returns {object} - –æ–±—ä–µ–∫—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  getStoredTokens() {
    const operation = () => {
      const token = this.storage.getItem(STORAGE_KEYS.TOKEN);
      const refreshToken = this.storage.getItem(STORAGE_KEYS.REFRESH_TOKEN);
      const userString = this.storage.getItem(STORAGE_KEYS.USER);
      
      let user = null;
      if (userString) {
        try {
          user = JSON.parse(userString);
        } catch (error) {
          console.warn('TokenManager: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', error);
          // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          this.storage.removeItem(STORAGE_KEYS.USER);
        }
      }

      return {
        token: token || null,
        refreshToken: refreshToken || null,
        user
      };
    };

    return this.performanceTracker.measureOperation('getStoredTokens', operation);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
   * @returns {boolean} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  clearTokens() {
    const operation = () => {
      const currentTokens = this.getStoredTokens();
      
      this.storage.removeItem(STORAGE_KEYS.TOKEN);
      this.storage.removeItem(STORAGE_KEYS.REFRESH_TOKEN);
      this.storage.removeItem(STORAGE_KEYS.USER);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
      this._notifyTokenChange(TOKEN_ACTIONS.CLEAR_TOKENS, currentTokens);
      
      return true;
    };

    return this.performanceTracker.measureOperation('clearTokens', operation);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
   * @param {string} token - —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π)
   * @returns {boolean} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  isValidToken(token) {
    const tokenToCheck = token || this.getStoredTokens().token;
    return this.performanceTracker.measureOperation('isValidToken', () => 
      TokenValidator.isValid(tokenToCheck)
    );
  }

  /**
   * –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
   * @param {string} token - —Ç–æ–∫–µ–Ω –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {object|null} - –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload –∏–ª–∏ null
   */
  decodeToken(token) {
    const tokenToDecode = token || this.getStoredTokens().token;
    return this.performanceTracker.measureOperation('decodeToken', () => 
      TokenValidator.getPayload(tokenToDecode)
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
   * @param {string} token - —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {number|null} - –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
   */
  getTokenExpirationTime(token) {
    const tokenToCheck = token || this.getStoredTokens().token;
    return this.performanceTracker.measureOperation('getTokenExpirationTime', () => 
      TokenValidator.getTimeToExpiration(tokenToCheck)
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
   * @param {string} token - —Ç–æ–∫–µ–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {object|null} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  getUserFromToken(token) {
    const tokenToCheck = token || this.getStoredTokens().token;
    return this.performanceTracker.measureOperation('getUserFromToken', () => 
      TokenValidator.getUserFromToken(tokenToCheck)
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
   * @param {string} token - —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param {number} minutesThreshold - –ø–æ—Ä–æ–≥ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
   * @returns {boolean} - –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω
   */
  shouldRefreshToken(token, minutesThreshold = 5) {
    const tokenToCheck = token || this.getStoredTokens().token;
    return this.performanceTracker.measureOperation('shouldRefreshToken', () => 
      TokenValidator.isExpiringSoon(tokenToCheck, minutesThreshold)
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–¥–ª—è debug)
   * @returns {object} - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   */
  getAllStorageData() {
    const tokens = this.getStoredTokens();
    const stats = this.performanceTracker.operations;
    
    return {
      ...tokens,
      performanceStats: stats,
      storageType: this.storage.constructor.name,
      isTokenValid: this.isValidToken(),
      timeToExpiration: this.getTokenExpirationTime(),
      shouldRefresh: this.shouldRefreshToken()
    };
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  showPerformanceStats() {
    this.performanceTracker.showStats();
  }

  /**
   * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  clearAllData() {
    this.clearTokens();
    this.performanceTracker.reset();
    this.observers.clear();
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (Observer pattern)
   * @param {function} callback - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   * @returns {function} - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
   */
  subscribe(callback) {
    this.observers.add(callback);
    return () => this.observers.delete(callback);
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (Observer pattern)
   * @param {string} action - —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
   * @param {object} data - –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
   */
  _notifyTokenChange(action, data) {
    this.observers.forEach(callback => {
      try {
        callback({ action, data, timestamp: Date.now() });
      } catch (error) {
        console.error('TokenManager: –û—à–∏–±–∫–∞ –≤ observer callback:', error);
      }
    });
  }
}

/**
 * Factory —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è TokenManager —Å localStorage
 * @param {boolean} enablePerformanceTracking - –≤–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @returns {TokenManager} - —ç–∫–∑–µ–º–ø–ª—è—Ä TokenManager
 */
export function createLocalStorageTokenManager(enablePerformanceTracking = false) {
  const storage = new LocalStorageTokenStorage();
  const performanceTracker = enablePerformanceTracking 
    ? new PerformanceTracker('TokenManager') 
    : null;
  
  return new TokenManager(storage, performanceTracker);
}

/**
 * Factory —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è TokenManager —Å sessionStorage
 * @param {boolean} enablePerformanceTracking - –≤–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @returns {TokenManager} - —ç–∫–∑–µ–º–ø–ª—è—Ä TokenManager
 */
export function createSessionStorageTokenManager(enablePerformanceTracking = false) {
  const storage = new SessionStorageTokenStorage();
  const performanceTracker = enablePerformanceTracking 
    ? new PerformanceTracker('TokenManager') 
    : null;
  
  return new TokenManager(storage, performanceTracker);
}

// –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const tokenManager = createLocalStorageTokenManager(process.env.NODE_ENV === 'development');

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TokenManager
export function useTokenManager() {
  return tokenManager;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º TokenManager –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
export default tokenManager; 