import React, { useState, useMemo } from 'react';
import Chart from '../ui/Chart';
import AnalyticsDataTable from '../ui/AnalyticsDataTable';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º "–ü–ª–∞–Ω vs –§–∞–∫—Ç"
 */
const AnalyticsCharts = ({ filters, analyticsData, isLoading }) => {
    const [activeView, setActiveView] = useState('categories');
    const [chartType, setChartType] = useState('bar');

    console.log('üîç AnalyticsCharts render:', { filters, analyticsData: !!analyticsData, isLoading });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
    const toSafeNumber = (value) => {
        const num = typeof value === 'string' ? parseFloat(String(value).replace(/\s/g, '').replace(',', '.')) : value;
        return Number.isFinite(num) ? num : 0;
    };

    // –§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    const prepareCategoryChartData = (planVsActualData) => {
        if (!planVsActualData?.categories) return [];
        return Object.entries(planVsActualData.categories).map(([categoryName, data]) => ({
            label: categoryName,
            plan: toSafeNumber(data.plan || 0),
            fact: toSafeNumber(data.actual || 0),
            // üéØ –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            deviation: toSafeNumber(data.deviation ?? (toSafeNumber(data.actual) - toSafeNumber(data.plan))),
            percentage: toSafeNumber(data.percentage ?? (toSafeNumber(data.plan) > 0 ? ((toSafeNumber(data.actual) / toSafeNumber(data.plan)) * 100) : 0))
        }));
    };

    const prepareShopChartData = (planVsActualData) => {
        if (!planVsActualData?.shops) return [];
        return Object.entries(planVsActualData.shops).map(([shopName, data]) => ({
            label: shopName,
            plan: toSafeNumber(data.plan || 0),
            fact: toSafeNumber(data.actual || 0),
            // üéØ –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            deviation: toSafeNumber(data.deviation ?? (toSafeNumber(data.actual) - toSafeNumber(data.plan))),
            percentage: toSafeNumber(data.percentage ?? (toSafeNumber(data.plan) > 0 ? ((toSafeNumber(data.actual) / toSafeNumber(data.plan)) * 100) : 0))
        }));
    };

    const prepareMetricsChartData = (planVsActualData) => {
        if (!planVsActualData?.metrics) return [];
        return Object.entries(planVsActualData.metrics).map(([metricName, data]) => ({
            label: metricName,
            plan: toSafeNumber(data.plan || 0),
            fact: toSafeNumber(data.actual || 0),
            // üéØ –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            deviation: toSafeNumber(data.deviation ?? (toSafeNumber(data.actual) - toSafeNumber(data.plan))),
            percentage: toSafeNumber(data.percentage ?? (toSafeNumber(data.plan) > 0 ? ((toSafeNumber(data.actual) / toSafeNumber(data.plan)) * 100) : 0))
        }));
    };



    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const chartData = useMemo(() => {
        if (!analyticsData?.planVsActual) return [];

        const planVsActualData = analyticsData.planVsActual;

        switch (activeView) {
            case 'categories':
                return prepareCategoryChartData(planVsActualData);
            case 'shops':
                return prepareShopChartData(planVsActualData);
            case 'metrics':
                return prepareMetricsChartData(planVsActualData);
            default:
                return [];
        }
    }, [analyticsData, activeView]);

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    const tableData = useMemo(() => {
        if (!chartData || chartData.length === 0) return [];
        return chartData.map(item => ({
            name: item.label,
            plan: item.plan,
            fact: item.fact,
            deviation: item.deviation,
            percentage: item.percentage
        }));
    }, [chartData]);

    const tableColumns = [
        { key: 'name', title: '–ù–∞–∑–≤–∞–Ω–∏–µ', sortable: true },
        { key: 'plan', title: '–ü–ª–∞–Ω', sortable: true, format: 'number' },
        { key: 'fact', title: '–§–∞–∫—Ç', sortable: true, format: 'number' },
        { key: 'deviation', title: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', sortable: true, format: 'number' },
        { key: 'percentage', title: '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', sortable: true, format: 'percent' }
    ];

    // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statistics = useMemo(() => {
        if (!analyticsData?.planVsActualStats) return null;
        return {
            ...analyticsData.planVsActualStats,
            itemsCount: tableData?.length || 0
        };
    }, [analyticsData, tableData]);

    if (isLoading) {
        return (
            <div className="text-center p-4">
                <div className="spinner-border text-primary" role="status">
                    <span className="sr-only">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </div>
                <p className="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º...</p>
            </div>
        );
    }

    if (!analyticsData || !analyticsData.planVsActual) {
        return (
            <div className="text-center p-4 text-muted">
                <h5>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</h5>
                <p>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
            </div>
        );
    }

    return (
        <div className="p-3">
            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
            <div className="row mb-4">
                <div className="col-md-8">
                    <h4 className="mb-0">–ü–ª–∞–Ω vs –§–∞–∫—Ç</h4>
                    <p className="text-muted mb-0">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤—ã—Ö –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π</p>
                </div>
                <div className="col-md-4">
                    <div className="d-flex gap-2 justify-content-end">
                        <div className="btn-group" role="group">
                            <button
                                className={`btn btn-sm ${activeView === 'categories' ? 'btn-primary' : 'btn-outline-primary'}`}
                                onClick={() => setActiveView('categories')}
                            >
                                –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                            </button>
                            <button
                                className={`btn btn-sm ${activeView === 'shops' ? 'btn-primary' : 'btn-outline-primary'}`}
                                onClick={() => setActiveView('shops')}
                            >
                                –ü–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
                            </button>
                            <button
                                className={`btn btn-sm ${activeView === 'metrics' ? 'btn-primary' : 'btn-outline-primary'}`}
                                onClick={() => setActiveView('metrics')}
                            >
                                –ü–æ –º–µ—Ç—Ä–∏–∫–∞–º
                            </button>

                        </div>
                        <select 
                            className="form-select form-select-sm"
                            value={chartType} 
                            onChange={(e) => setChartType(e.target.value)}
                        >
                            <option value="bar">–°—Ç–æ–ª–±—Ü—ã</option>
                            <option value="line">–õ–∏–Ω–∏–∏</option>
                            <option value="pie">–ö—Ä—É–≥–æ–≤–∞—è</option>
                        </select>
                    </div>
                </div>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ */}
            <div className="card mb-4">
                <div className="card-body">
                    <h5 className="card-title">–ü–ª–∞–Ω vs –§–∞–∫—Ç</h5>
                    <div style={{ height: '400px' }}>
                        {chartData && chartData.length > 0 ? (
                            <Chart
                                type={chartType}
                                data={chartData}
                                selectedMetrics={filters.metrics || ['plan', 'fact']}
                            />
                        ) : (
                            <div className="d-flex align-items-center justify-content-center h-100 text-muted">
                                –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            {statistics && (
                <div className="card mb-4">
                    <div className="card-body">
                        <h6 className="card-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h6>
                        <div className="row text-center">
                            <div className="col">
                                <strong className="text-primary d-block">{statistics.totalPlan.toLocaleString('ru-RU')}</strong>
                                <small className="text-muted">–û–±—â–∏–π –ø–ª–∞–Ω</small>
                            </div>
                            <div className="col">
                                <strong className="text-success d-block">{statistics.totalFact.toLocaleString('ru-RU')}</strong>
                                <small className="text-muted">–û–±—â–∏–π —Ñ–∞–∫—Ç</small>
                            </div>
                            <div className="col">
                                <strong className={`d-block ${statistics.totalDeviation >= 0 ? 'text-success' : 'text-danger'}`}>
                                    {statistics.totalDeviation.toLocaleString('ru-RU')}
                                </strong>
                                <small className="text-muted">–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ</small>
                            </div>
                            <div className="col">
                                <strong className={`d-block ${statistics.totalPercentage >= 100 ? 'text-success' : 'text-warning'}`}>
                                    {statistics.totalPercentage.toFixed(1)}%
                                </strong>
                                <small className="text-muted">% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</small>
                            </div>
                            <div className="col">
                                <strong className="text-info d-block">{statistics.itemsCount}</strong>
                                <small className="text-muted">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</small>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
            <div className="card">
                <div className="card-body">
                    <h6 className="card-title">–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h6>
                    {tableData && tableData.length > 0 ? (
                        <AnalyticsDataTable
                            data={tableData}
                            columns={tableColumns}
                            defaultSort={{ key: 'percentage', direction: 'desc' }}
                        />
                    ) : (
                        <div className="text-center text-muted p-3">
                            –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default AnalyticsCharts; 