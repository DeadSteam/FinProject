import React, { useState, useMemo } from 'react';
import './SlideTypeModal.css';

/**
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–ª–∞–π–¥–∞
 */
const SlideTypeModal = ({ 
    isOpen, 
    onClose, 
    onSelectSlideType 
}) => {
    const [selectedType, setSelectedType] = useState(null);

    // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–ª–∞–π–¥–æ–≤
    const slideTypes = [
        {
            id: 'title',
            name: '–¢–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥',
            description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞',
            icon: 'üìÑ',
            category: '–û—Å–Ω–æ–≤–Ω—ã–µ'
        },
        {
            id: 'analytics-chart',
            name: '–ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
            description: '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
            icon: 'üìä',
            category: '–ì—Ä–∞—Ñ–∏–∫–∏'
        },
        {
            id: 'finance-chart',
            name: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫',
            description: '–ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
            icon: 'üí∞',
            category: '–ì—Ä–∞—Ñ–∏–∫–∏'
        },
        {
            id: 'analytics-table',
            name: '–¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
            description: '–¢–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
            icon: 'üìã',
            category: '–¢–∞–±–ª–∏—Ü—ã'
        },
        {
            id: 'finance-table',
            name: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞',
            description: '–¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
            icon: 'üìä',
            category: '–¢–∞–±–ª–∏—Ü—ã'
        },
        {
            id: 'comparison',
            name: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ',
            description: '–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
            icon: '‚öñÔ∏è',
            category: '–ê–Ω–∞–ª–∏–∑'
        },
        {
            id: 'trends',
            name: '–¢—Ä–µ–Ω–¥—ã',
            description: '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –¥–∏–Ω–∞–º–∏–∫–∏',
            icon: 'üìà',
            category: '–ê–Ω–∞–ª–∏–∑'
        },
        {
            id: 'plan-vs-actual',
            name: '–ü–ª–∞–Ω vs –§–∞–∫—Ç',
            description: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤—ã—Ö –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
            icon: 'üéØ',
            category: '–ê–Ω–∞–ª–∏–∑'
        }
    ];

    // –í–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞–∫ –Ω–∞ –º–∞–∫–µ—Ç–µ (–±–µ–∑ –∏–∫–æ–Ω–æ–∫)
    const tabs = useMemo(() => (
        ['–í—Å–µ —Ç–∏–ø—ã', '–ë–∞–∑–æ–≤—ã–µ', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–§–∏–Ω–∞–Ω—Å—ã', '–°—Ä–∞–≤–Ω–µ–Ω–∏—è']
    ), []);
    const [activeTab, setActiveTab] = useState('–í—Å–µ —Ç–∏–ø—ã');

    const handleSelectType = (type) => {
        setSelectedType(type);
    };

    const handleConfirm = () => {
        if (selectedType) {
            onSelectSlideType(selectedType.id);
            onClose();
            setSelectedType(null);
        }
    };

    const handleClose = () => {
        onClose();
        setSelectedType(null);
    };

    if (!isOpen) return null;

    return (
        <div className="modal active" onClick={handleClose}>
            <div className="modal-content modal-xl" onClick={(e) => e.stopPropagation()}>
                <div className="modal-header">
                    <h5 className="modal-title">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ª–∞–π–¥–∞</h5>
                    <button 
                        className="modal-close" 
                        onClick={handleClose}
                        title="–ó–∞–∫—Ä—ã—Ç—å"
                    >
                        <i className="fas fa-times"></i>
                    </button>
                </div>
                
                <div className="modal-body">
                    <div className="slide-types-container">
                        {/* –í–∫–ª–∞–¥–∫–∏ */}
                        <div className="type-tabs">
                            {tabs.map(tab => (
                                <button
                                    key={tab}
                                    className={`tab-btn ${activeTab === tab ? 'active' : ''}`}
                                    onClick={() => setActiveTab(tab)}
                                >
                                    {tab}
                                </button>
                            ))}
                        </div>

                        {/* –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –±–µ–∑ –∏–∫–æ–Ω–æ–∫, –∫–∞–∫ –≤ –º–∞–∫–µ—Ç–µ */}
                        <div className="slide-types-grid">
                            {slideTypes
                                .filter(t => activeTab === '–í—Å–µ —Ç–∏–ø—ã' ||
                                    (activeTab === '–ë–∞–∑–æ–≤—ã–µ' && t.category === '–û—Å–Ω–æ–≤–Ω—ã–µ') ||
                                    (activeTab === '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞' && (t.category === '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞' || t.id === 'trends' || t.id === 'analytics-chart' || t.id === 'analytics-table')) ||
                                    (activeTab === '–§–∏–Ω–∞–Ω—Å—ã' && (t.category === '–§–∏–Ω–∞–Ω—Å—ã' || t.id === 'finance-chart' || t.id === 'finance-table')) ||
                                    (activeTab === '–°—Ä–∞–≤–Ω–µ–Ω–∏—è' && (t.category === '–°—Ä–∞–≤–Ω–µ–Ω–∏—è' || t.id === 'comparison' || t.id === 'plan-vs-actual'))
                                )
                                .map(type => (
                                <div
                                    key={type.id}
                                    className={`slide-type-card ${selectedType?.id === type.id ? 'selected' : ''}`}
                                    onClick={() => handleSelectType(type)}
                                >
                                    <div className="slide-type-texts">
                                        <div className="slide-type-name">{type.name}</div>
                                        <div className="slide-type-description">{type.description}</div>
                                    </div>
                                    <div className="slide-type-chevron">‚Ä∫</div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
                
                <div className="modal-footer">
                    <button 
                        className="btn btn-secondary" 
                        onClick={handleClose}
                    >
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button className="btn btn-primary" onClick={handleConfirm} disabled={!selectedType}>–°–æ–∑–¥–∞—Ç—å —Å–ª–∞–π–¥</button>
                </div>
            </div>
        </div>
    );
};

export default SlideTypeModal;
