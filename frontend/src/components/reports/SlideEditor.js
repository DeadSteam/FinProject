import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { useNotifications } from '../../hooks';
import { useReportData } from './ReportDataProvider';
import DataSourceSelector from './DataSourceSelector';
import SlideSettings from './SlideSettings';
import SlidePreview from './SlidePreview';
import SlideFilters from './SlideFilters';
import './SlideEditor.css';

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ development —Ä–µ–∂–∏–º–∞
const isDevelopment = () => {
    if (typeof window !== 'undefined') {
        return window.location.hostname === 'localhost' && ['3000', '3001'].includes(window.location.port);
    }
    return false;
};

const dev = isDevelopment();

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–ª–∞–π–¥–æ–≤.
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–π–¥—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤.
 */
const SlideEditor = ({ 
    slide, 
    onSlideChange, 
    onSlideSave, 
    onSlideDelete,
    availableData = {},
    isEditing = false 
}) => {
    const { showSuccess, showError, showInfo } = useNotifications();
    const { loadSlideData, transformDataForChart } = useReportData();
    
    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–∞–π–¥–∞
    const [localSlide, setLocalSlide] = useState(() => ({
        id: slide?.id || Date.now().toString(),
        type: slide?.type || 'title',
        title: slide?.title || '–ù–æ–≤—ã–π —Å–ª–∞–π–¥',
        description: slide?.description || '',
        content: {
            settings: slide?.content?.settings || {},
            filters: slide?.content?.filters || {}
        },
        ...slide
    }));
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const [previewData, setPreviewData] = useState(null);
    const [isLoadingPreview, setIsLoadingPreview] = useState(false);
    const [activeTab, setActiveTab] = useState('settings');
    
    // –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    const previewCache = useRef(new Map());
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–∞ slide
    useEffect(() => {
        if (slide) {
            setLocalSlide({
                id: slide.id || Date.now().toString(),
                type: slide.type || 'title',
                title: slide.title || '–ù–æ–≤—ã–π —Å–ª–∞–π–¥',
                description: slide.description || '',
                content: {
                    settings: slide.content?.settings || {},
                    filters: slide.content?.filters || {}
                },
                ...slide
            });
        }
    }, [slide]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const handleTitleChange = useCallback((newTitle) => {
        const updatedSlide = { ...localSlide, title: newTitle };
        setLocalSlide(updatedSlide);
        onSlideChange?.(updatedSlide);
    }, [localSlide, onSlideChange]);

    const handleDescriptionChange = useCallback((newDescription) => {
        const updatedSlide = { ...localSlide, description: newDescription };
        setLocalSlide(updatedSlide);
        onSlideChange?.(updatedSlide);
    }, [localSlide, onSlideChange]);

    const handleTypeChange = useCallback((newType) => {
        const updatedSlide = {
            ...localSlide,
            type: newType,
            content: {
                settings: {},
                filters: {}
            }
        };
        setLocalSlide(updatedSlide);
        onSlideChange?.(updatedSlide);
        setPreviewData(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞
    }, [localSlide, onSlideChange]);

    const handleSettingsChange = useCallback((newSettings) => {
        const updatedSlide = {
            ...localSlide,
            content: {
                ...localSlide.content,
                settings: { ...localSlide.content.settings, ...newSettings }
            }
        };
        setLocalSlide(updatedSlide);
        onSlideChange?.(updatedSlide);
    }, [localSlide, onSlideChange]);

    const handleFiltersChange = useCallback((newFilters) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—è showDeviation –∏ showPercentage –≤ –º–∞—Å—Å–∏–≤ metrics –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–ª–∞–π–¥–æ–≤
        let processedFilters = { ...newFilters };
        
        if (localSlide.type === 'finance-chart' || localSlide.type === 'finance-table') {
            const metrics = [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if (newFilters.showPlan !== false) {
                metrics.push('plan');
            }
            if (newFilters.showFact !== false) {
                metrics.push('fact');
            }
            if (newFilters.showDeviation === true) {
                metrics.push('deviation');
            }
            if (newFilters.showPercentage === true) {
                metrics.push('percentage');
            }
            
            processedFilters.metrics = metrics;
            
            if (dev) {
                console.log('üîç SlideEditor: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–ª–∞–π–¥–∞:', {
                    showPlan: newFilters.showPlan,
                    showFact: newFilters.showFact,
                    showDeviation: newFilters.showDeviation,
                    showPercentage: newFilters.showPercentage,
                    metrics
                });
            }
        }
        
        const updatedSlide = {
            ...localSlide,
            content: {
                ...localSlide.content,
                filters: { ...localSlide.content.filters, ...processedFilters }
            }
        };
        setLocalSlide(updatedSlide);
        onSlideChange?.(updatedSlide);
        setPreviewData(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        
        if (dev) {
            console.log('üîç SlideEditor: –§–∏–ª—å—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥:', processedFilters);
            console.log('üîç SlideEditor: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–ª–∞–π–¥–∞:', updatedSlide.content.filters);
        }
    }, [localSlide, onSlideChange]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const loadPreviewData = useCallback(async () => {
        if (localSlide.type === 'title') {
            setPreviewData({ type: 'title' });
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const cacheKey = `${localSlide.type}_${JSON.stringify(localSlide.content.filters)}_${JSON.stringify(localSlide.content.settings)}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (previewCache.current.has(cacheKey)) {
            const cachedData = previewCache.current.get(cacheKey);
            if (Date.now() - cachedData.timestamp < 2 * 60 * 1000) { // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                setPreviewData(cachedData.data);
                return;
            }
        }

        setIsLoadingPreview(true);
        
        try {
            const data = await loadSlideData(
                localSlide.type, 
                localSlide.content.filters, 
                localSlide.content.settings
            );
            
            if (data) {
                const transformedData = transformDataForChart(
                    data, 
                    localSlide.type, 
                    localSlide.content.filters?.metrics || ['plan', 'fact']
                );
                
                const previewData = {
                    ...data,
                    chartData: transformedData,
                    tableData: data.tableData || data.metrics || []
                };
                
                // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                previewCache.current.set(cacheKey, {
                    data: previewData,
                    timestamp: Date.now()
                });
                
                setPreviewData(previewData);
            } else {
                setPreviewData(null);
            }
        } catch (error) {
            if (dev) console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
            setPreviewData(null);
        } finally {
            setIsLoadingPreview(false);
        }
    }, [localSlide.type, localSlide.content.filters, localSlide.content.settings, loadSlideData, transformDataForChart, showError]);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —É–º–Ω–æ–π –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥ –ª–æ–≥–∏–∫–æ–π
    useEffect(() => {
        if (localSlide.type !== 'title' && localSlide.content.filters) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
            const hasSignificantChanges = Object.keys(localSlide.content.filters).some(key => {
                const filterValue = localSlide.content.filters[key];
                return filterValue && filterValue !== '' && filterValue !== 'all' && 
                       (!Array.isArray(filterValue) || filterValue.length > 0);
            });
            
            if (hasSignificantChanges) {
                const timeoutId = setTimeout(() => {
                    loadPreviewData();
                }, 800); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                
                return () => clearTimeout(timeoutId);
            }
        }
    }, [localSlide.content.filters, loadPreviewData]);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–∞–π–¥–∞
    const handleSave = useCallback(() => {
        try {
            onSlideSave?.(localSlide);
            showSuccess('–°–ª–∞–π–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        } catch (error) {
            if (dev) console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–∞–π–¥–∞:', error);
            showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–∞–π–¥–∞');
        }
    }, [localSlide, onSlideSave, showSuccess, showError]);

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–∞–π–¥–∞
    const handleDelete = useCallback(() => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–ª–∞–π–¥?')) {
            try {
                onSlideDelete?.(localSlide.id);
                showInfo('–°–ª–∞–π–¥ —É–¥–∞–ª–µ–Ω');
            } catch (error) {
                if (dev) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–∞–π–¥–∞:', error);
                showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–∞–π–¥–∞');
            }
        }
    }, [localSlide.id, onSlideDelete, showInfo, showError]);

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–ª–∞–π–¥–æ–≤
    const slideTypes = useMemo(() => [
        {
            id: 'title',
            name: '–¢–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥',
            description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞',
            icon: 'üìÑ'
        },
        {
            id: 'analytics-chart',
            name: '–ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
            description: '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
            icon: 'üìä'
        },
        {
            id: 'finance-chart',
            name: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫',
            description: '–ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
            icon: 'üí∞'
        },
        {
            id: 'analytics-table',
            name: '–¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
            description: '–¢–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
            icon: 'üìã'
        },
        {
            id: 'finance-table',
            name: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞',
            description: '–¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
            icon: 'üìä'
        },
        {
            id: 'comparison',
            name: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ',
            description: '–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
            icon: '‚öñÔ∏è'
        },
        {
            id: 'trends',
            name: '–¢—Ä–µ–Ω–¥—ã',
            description: '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –¥–∏–Ω–∞–º–∏–∫–∏',
            icon: 'üìà'
        },
        {
            id: 'plan-vs-actual',
            name: '–ü–ª–∞–Ω vs –§–∞–∫—Ç',
            description: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤—ã—Ö –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
            icon: 'üéØ'
        }
    ], []);

    // –í–º–µ—Å—Ç–æ –≤–∫–ª–∞–¥–æ–∫ ‚Äî –µ–¥–∏–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏, –≤–∫–ª—é—á–∞—é—â–∞—è —Ñ–∏–ª—å—Ç—Ä—ã, –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    const tabs = [
        {
            id: 'settings',
            name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            icon: '‚öôÔ∏è'
        },
        {
            id: 'preview',
            name: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
            icon: 'üëÅÔ∏è'
        }
    ];

    return (
        <div className="slide-editor">
            {/* –ï–¥–∏–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º */}
            <div className="card mb-3">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è */}
                <div className="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <h5 className="mb-1">
                            {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞'}
                        </h5>
                        <small className="text-muted">
                            {slideTypes.find(t => t.id === localSlide.type)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'}
                        </small>
                    </div>
                    <div className="d-flex gap-2">
                        <button
                            className={`btn btn-${activeTab === 'settings' ? 'primary' : 'secondary'} btn-sm`}
                            onClick={() => setActiveTab('settings')}
                            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                        >
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" className="me-1" width="16" height="16">
                                <circle cx="12" cy="12" r="3"/>
                                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"/>
                            </svg>
                            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                        </button>
                        <button
                            className={`btn btn-${activeTab === 'preview' ? 'primary' : 'secondary'} btn-sm`}
                            onClick={() => setActiveTab('preview')}
                            title="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"
                        >
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" className="me-1" width="16" height="16">
                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                                <circle cx="12" cy="12" r="3"/>
                            </svg>
                            –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                        </button>
                    </div>
                </div>

                {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */}
                <div className="card-body">
                    {activeTab === 'settings' && (
                        <>
                            <SlideSettings
                                slideType={localSlide.type}
                                title={localSlide.title}
                                description={localSlide.description}
                                settings={localSlide.content.settings}
                                filters={localSlide.content.filters}
                                availableData={availableData}
                                onTitleChange={handleTitleChange}
                                onDescriptionChange={handleDescriptionChange}
                                onSettingsChange={handleSettingsChange}
                                onFiltersChange={handleFiltersChange}
                            />
                            {localSlide.type !== 'title' && (
                                <SlideFilters
                                    slideType={localSlide.type}
                                    filters={localSlide.content.filters}
                                    availableData={availableData}
                                    onFiltersChange={handleFiltersChange}
                                />
                            )}
                        </>
                    )}

                    {activeTab === 'preview' && (
                        <SlidePreview
                            slideType={localSlide.type}
                            title={localSlide.title}
                            description={localSlide.description}
                            settings={localSlide.content.settings}
                            filters={localSlide.content.filters}
                            previewData={previewData}
                            isLoading={isLoadingPreview}
                            availableData={availableData}
                            onRefreshData={loadPreviewData}
                        />
                    )}
                </div>
            </div>
        </div>
    );
};

export default SlideEditor;
