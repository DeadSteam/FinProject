import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { useSearchParams } from 'react-router-dom';

import { useToast } from '../../context/AppContext';
import { useApiQuery, usePermissions, useNotifications, useModal } from '../../hooks';
import { useDataVersioning } from '../../hooks/useDataVersioning';
import { useAnalyticsService, useShopService, useMetricService } from '../../services/index.js';
import { useFinanceData } from '../../hooks/useFinanceData';
import { exportFinanceDataToExcel } from '../../utils/excelExport';
import FinanceDetailsView from './FinanceDetailsView';
import { useFinanceFilters } from '../../hooks/useFinanceFilters.js';

/**
 * Container –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è FinanceDetails
 * –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
 * –°–æ–±–ª—é–¥–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø SRP - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫–∞, –±–µ–∑ UI
 * 
 * –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–∞—Ç–∞
 * - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ç–æ –∏ –∫–æ–≥–¥–∞ –≤–Ω–æ—Å–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
 */
const FinanceDetailsContainer = () => {
    const { showToast } = useToast();
    const { 
        isAdmin, 
        isModerator, 
        canAccess 
    } = usePermissions();
    const { showSuccess, showError, showWarning } = useNotifications();
    
    // –°–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ IoC
    const analyticsService = useAnalyticsService();
    const shopService = useShopService();
    const metricService = useMetricService();
    const { selectedYear, selectedShop, changeYear, changeShop, searchParams, setSearchParams } = useFinanceFilters();
    const queryString = searchParams.toString();

    // API —Ö—É–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const shopsApi = useApiQuery(() => shopService.getShops(), { executeOnMount: true });
    const yearsApi = useApiQuery(() => metricService.api.get('/finance/years'), { executeOnMount: true });

    // üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const versioningConfig = {
        enableAutoVersioning: true,
        versionInterval: 10000, // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        maxVersionHistory: 100, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        trackFieldChanges: true,
        ignoreFields: ['_timestamp', 'lastAccessed', 'loading'],
        enableRemoteSync: false, // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
        enableLogging: process.env.NODE_ENV === 'development'
    };

    const {
        createVersion,
        getVersionHistory,
        rollbackToVersion,
        compareVersions,
        getCurrentVersion,
        versionMetrics
    } = useDataVersioning(versioningConfig);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const {
        metrics,
        periods,
        categoryName,
        loading: dataLoading,
        filtering,
        activeMetric,
        setActiveMetric,
        reload: reloadMetrics
    } = useFinanceData({
        analyticsService,
        metricService,
        searchParams,
        selectedYear,
        selectedShop
    });
    
    // üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const [showVersionHistory, setShowVersionHistory] = useState(false);
    const [versionHistory, setVersionHistory] = useState([]);
    const [selectedVersionForCompare, setSelectedVersionForCompare] = useState(null);
    
    // –ì—Ä–∞—Ñ–∏–∫
    const [chartView, setChartView] = useState('quarters');
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const editModal = useModal();
    const initYearModal = useModal();
    const addMetricModal = useModal();
    const yearlyPlanModal = useModal();

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ shops –≤—Å–µ–≥–¥–∞ –º–∞—Å—Å–∏–≤
    const shops = Array.isArray(shopsApi.data)
        ? shopsApi.data
        : (Array.isArray(shopsApi.data?.shops) ? shopsApi.data.shops : []);
    const years = useMemo(() => {
        let extracted = [];
        if (Array.isArray(yearsApi.data) && yearsApi.data.length) {
            extracted = yearsApi.data.map(y => (typeof y === 'object' && y !== null ? y.year : y));
        }
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        const yearInt = parseInt(selectedYear);
        if (!extracted.includes(yearInt)) {
            extracted.push(yearInt);
        }
        return [...new Set(extracted)].sort();
    }, [yearsApi.data, selectedYear]);
    const loading = shopsApi.loading || yearsApi.loading || dataLoading;
    const hasAdminRights = isAdmin || isModerator || canAccess('finance', 'write');

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ initial data: shops/years —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ executeOnMount, –º–µ—Ç—Ä–∏–∫–∏ - –≤ hook
    useEffect(() => {
        (async () => {
            await Promise.all([
                shopsApi.refetch({ throwOnError: false }),
                yearsApi.refetch({ throwOnError: false })
            ]);
        })();
    }, []);

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
     */
    const prepareChartData = () => {
        if (!activeMetric) {
            return [];
        }

        const periodsData = activeMetric.periods_value;
        
        if (!periodsData) {
            return [];
        }

        const isQuarterly = chartView === 'quarters';
        let chartData = [];

        try {
            if (isQuarterly && periodsData.quarters) {
                // –î–∞–Ω–Ω—ã–µ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
                const quarterLabels = ['I –∫–≤–∞—Ä—Ç–∞–ª', 'II –∫–≤–∞—Ä—Ç–∞–ª', 'III –∫–≤–∞—Ä—Ç–∞–ª', 'IV –∫–≤–∞—Ä—Ç–∞–ª'];
                const quarterKeys = ['I –∫–≤–∞—Ä—Ç–∞–ª', 'II –∫–≤–∞—Ä—Ç–∞–ª', 'III –∫–≤–∞—Ä—Ç–∞–ª', 'IV –∫–≤–∞—Ä—Ç–∞–ª'];
                
                chartData = quarterKeys.map((quarterKey, index) => {
                    const quarterData = periodsData.quarters[quarterKey];
                    const label = quarterLabels[index];
                    
                    const plan = parseFloat(quarterData?.plan || 0);
                    const fact = parseFloat(quarterData?.actual || 0);
                    
                    return {
                        label,
                        plan: isNaN(plan) ? 0 : plan,
                        fact: isNaN(fact) ? 0 : fact
                    };
                });
            } else if (!isQuarterly && periodsData.months) {
                // –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
                const monthNames = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', 
                                  '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'];
                const monthKeys = ['—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
                                 '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å'];
                                  
                chartData = monthKeys.map((monthKey, index) => {
                    const monthData = periodsData.months[monthKey];
                    const label = monthNames[index];
                    
                    const plan = parseFloat(monthData?.plan || 0);
                    const fact = parseFloat(monthData?.actual || 0);
                    
                    return {
                        label,
                        plan: isNaN(plan) ? 0 : plan,
                        fact: isNaN(fact) ? 0 : fact
                    };
                });
            }
        } catch (error) {
            return [];
        }

        return chartData;
    };

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    const handleYearChange = changeYear;
    const handleShopChange = changeShop;

    const handleEditValue = (editData) => {
        editModal.open(editData);
    };

    const handleSaveValue = async (updatedData = null) => {
        try {
            // üìä –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å updatedData)
            if (updatedData) {
                const versionData = {
                    entity: 'finance_metrics',
                    entityId: updatedData?.metricId || 'global',
                    data: {
                        metrics,
                        periods,
                        categoryName,
                        selectedYear,
                        selectedShop,
                        updatedData
                    },
                    metadata: {
                        action: 'edit_metric_value',
                        user: 'current_user', // TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                        timestamp: Date.now(),
                        categoryName,
                        year: selectedYear,
                        shop: selectedShop
                    }
                };

                await createVersion(versionData);
            }
            
            // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            await reloadMetrics();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
            if (showVersionHistory) {
                await loadVersionHistory();
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            // –î–∞–∂–µ –µ—Å–ª–∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            try {
                await reloadMetrics();
            } catch (loadError) {
                showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${loadError.message}`);
            }
        }
    };

    // üìä –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const loadVersionHistory = async () => {
        try {
            const history = await getVersionHistory({
                entity: 'finance_metrics',
                entityId: 'global',
                limit: 50
            });
            setVersionHistory(history);
        } catch (error) {
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏', `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π: ${error.message}`);
        }
    };

    const handleShowVersionHistory = async () => {
        setShowVersionHistory(true);
        await loadVersionHistory();
    };

    const handleRollbackToVersion = async (versionId) => {
        try {
            const restoredData = await rollbackToVersion(versionId);
            
            if (restoredData && restoredData.data) {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –≤–µ—Ä—Å–∏–∏
                const { metrics: restoredMetrics, periods: restoredPeriods, categoryName: restoredCategoryName } = restoredData.data;
                
                setActiveMetric(restoredMetrics[0]);
                
                showSuccess('–û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω', `–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫ –≤–µ—Ä—Å–∏–∏ –æ—Ç ${new Date(restoredData.timestamp).toLocaleString()}`);
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                await reloadMetrics();
                await loadVersionHistory();
            }
        } catch (error) {
            showError('–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç –∫ –≤–µ—Ä—Å–∏–∏: ${error.message}`);
        }
    };

    const handleCompareVersions = async (versionId1, versionId2) => {
        try {
            const comparison = await compareVersions(versionId1, versionId2);
            // TODO: –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            console.log('Version comparison:', comparison);
            showSuccess('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π', '–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞');
        } catch (error) {
            showError('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', `–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å –≤–µ—Ä—Å–∏–∏: ${error.message}`);
        }
    };

    const exportToExcel = async () => {
        try {
            await exportFinanceDataToExcel({
                metrics,
                periods,
                categoryName,
                selectedYear,
                selectedShop: selectedShop === 'all' ? '–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã' : (Array.isArray(shops) ? shops.find(s => s.id === parseInt(selectedShop))?.name : null)
            });
            showSuccess('–≠–∫—Å–ø–æ—Ä—Ç', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel');
        } catch (error) {
            showError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const handleInitYearSuccess = (year) => {
        showSuccess('–ì–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', `–î–∞–Ω–Ω—ã–µ –¥–ª—è ${year} –≥–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã`);
        initYearModal.close();
        reloadMetrics();
    };

    const handleAddMetricSuccess = () => {
        showSuccess('–ú–µ—Ç—Ä–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', '–ù–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
        addMetricModal.close();
        reloadMetrics();
    };

    const handleYearlyPlanSuccess = () => {
        showSuccess('–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω', '–ì–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        yearlyPlanModal.close();
        reloadMetrics();
    };

    // –ü—Ä–æ–ø—Å—ã –¥–ª—è View –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const viewProps = {
        // –î–∞–Ω–Ω—ã–µ
        metrics,
        periods,
        shops,
        years,
        categoryName,
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        loading,
        filtering,
        selectedYear,
        selectedShop,
        activeMetric,
        chartView,
        hasAdminRights,
        
        // üìä –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        showVersionHistory,
        versionHistory,
        versionMetrics,
        selectedVersionForCompare,
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        chartData: prepareChartData(),
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        editModal,
        initYearModal,
        addMetricModal,
        yearlyPlanModal,
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        onYearChange: handleYearChange,
        onShopChange: handleShopChange,
        onActiveMetricChange: setActiveMetric,
        onChartViewChange: setChartView,
        onEditValue: handleEditValue,
        onSaveValue: handleSaveValue,
        onExport: exportToExcel,
        onInitYear: () => initYearModal.open(),
        onAddMetric: () => addMetricModal.open(),
        onYearlyPlan: () => yearlyPlanModal.open(),
        
        // üìä –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        onShowVersionHistory: handleShowVersionHistory,
        onHideVersionHistory: () => setShowVersionHistory(false),
        onRollbackToVersion: handleRollbackToVersion,
        onCompareVersions: handleCompareVersions,
        onSelectVersionForCompare: setSelectedVersionForCompare,
        
        // –ö–æ–ª–ª–±—ç–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        onInitYearSuccess: handleInitYearSuccess,
        onAddMetricSuccess: handleAddMetricSuccess,
        onYearlyPlanSuccess: handleYearlyPlanSuccess,
        
        // URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        searchParams
    };

    return <FinanceDetailsView {...viewProps} />;
};

export default FinanceDetailsContainer; 
