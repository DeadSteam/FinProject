import { ApiClient } from './http/ApiClient';

class ReportsService {
    constructor() {
        this.apiClient = new ApiClient();
    }

    async getMetricsForCategory(categoryId) {
        try {
            const params = new URLSearchParams();
            if (categoryId && categoryId !== 'all') {
                params.append('category_id', categoryId);
            }
            
            const url = `/finance/metrics?${params}`;
            console.log('üîÑ ReportsService: –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –ø–æ URL:', url);
            console.log('üîÑ ReportsService: categoryId:', categoryId);
            
            const response = await this.apiClient.get(url);
            console.log('‚úÖ ReportsService: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            console.log('üìä ReportsService: –¢–∏–ø –æ—Ç–≤–µ—Ç–∞:', typeof response);
            console.log('üìä ReportsService: –≠—Ç–æ –º–∞—Å—Å–∏–≤?', Array.isArray(response));
            
            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –≤ –ø–æ–ª–µ data
            const metrics = Array.isArray(response) ? response : (response.data || []);
            console.log('üìä ReportsService: –î–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫:', metrics);
            console.log('üìä ReportsService: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫:', metrics.length);
            
            if (metrics.length > 0) {
                console.log('üìä ReportsService: –ü–µ—Ä–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞:', metrics[0]);
            }
            
            return metrics;
        } catch (error) {
            console.error('‚ùå ReportsService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error);
            console.error('‚ùå ReportsService: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–ª–∞–π–¥–æ–≤
     */
    async getFinanceDataForSlide(filters = {}) {
        try {
            const params = new URLSearchParams();
            
            if (filters.year) params.append('year', filters.year);
            if (filters.shop && filters.shop !== 'all') params.append('shop_id', filters.shop);
            if (filters.category && filters.category !== 'all') params.append('category_id', filters.category);
            if (filters.metric && filters.metric !== 'all') params.append('metric_id', filters.metric);
            
            console.log('üîÑ ReportsService: –ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);
            const response = await this.apiClient.get(`/finance/metrics/with-data?${params}`);
            console.log('‚úÖ ReportsService: –û—Ç–≤–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', response);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            const chartData = this.prepareFinanceChartData(response, filters);
            console.log('üìä ReportsService: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:', chartData);
            
            return {
                chartData: chartData,
                tableData: this.prepareFinanceTableData(response, filters),
                tableColumns: this.getFinanceTableColumns(filters),
                selectedMetrics: this.getSelectedMetrics(filters),
                shopName: this.getShopName(filters.shop),
                categoryName: this.getCategoryName(filters.category),
                metricName: this.getMetricName(filters.metric),
                rawData: response
            };
        } catch (error) {
            console.error('‚ùå ReportsService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            console.error('‚ùå ReportsService: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    prepareFinanceChartData(rawData, filters) {
        console.log('üîç ReportsService: prepareFinanceChartData –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', rawData);
        console.log('üîç ReportsService: –§–∏–ª—å—Ç—Ä—ã:', filters);
        
        if (!Array.isArray(rawData) || rawData.length === 0) {
            console.log('‚ö†Ô∏è ReportsService: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
            return [];
        }

        const periodType = filters.periodType || 'quarters';
        const chartData = [];

        console.log('üîç ReportsService: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º', rawData.length, '–º–µ—Ç—Ä–∏–∫');
        console.log('üîç ReportsService: –¢–∏–ø –ø–µ—Ä–∏–æ–¥–∞:', periodType);

        rawData.forEach((metric, index) => {
            console.log(`üîç ReportsService: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É ${index + 1}:`, metric);
            
            const periods = metric.periods;
            console.log(`üîç ReportsService: –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}:`, periods);
            
            if (!periods) {
                console.log(`‚ö†Ô∏è ReportsService: –ù–µ—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}`);
                return;
            }

            let periodData = [];
            
            if (periodType === 'quarters' && periods.quarters) {
                console.log(`üîç ReportsService: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–≤–∞—Ä—Ç–∞–ª—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}:`, periods.quarters);
                periodData = Object.entries(periods.quarters)
                    .filter(([quarter, data]) => data && (data.actual !== null || data.plan !== null))
                    .map(([quarter, data]) => ({
                        label: `Q${quarter}`,
                        plan: data.plan || 0,
                        fact: data.actual || 0,
                        deviation: (data.actual || 0) - (data.plan || 0)
                    }));
            } else if (periodType === 'months' && periods.months) {
                console.log(`üîç ReportsService: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Å—è—Ü—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}:`, periods.months);
                periodData = Object.entries(periods.months)
                    .filter(([month, data]) => data && (data.actual !== null || data.plan !== null))
                    .map(([month, data]) => ({
                        label: this.getMonthName(parseInt(month)),
                        plan: data.plan || 0,
                        fact: data.actual || 0,
                        deviation: (data.actual || 0) - (data.plan || 0)
                    }));
            } else if (periodType === 'year' && periods.year) {
                console.log(`üîç ReportsService: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–¥ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}:`, periods.year);
                periodData = [{
                    label: '–ì–æ–¥',
                    plan: periods.year.plan || 0,
                    fact: periods.year.actual || 0,
                    deviation: (periods.year.actual || 0) - (periods.year.plan || 0)
                }];
            } else {
                console.log(`‚ö†Ô∏è ReportsService: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞ ${periodType} –≤ –º–µ—Ç—Ä–∏–∫–µ ${index + 1}`);
                console.log(`üîç ReportsService: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –ø–µ—Ä–∏–æ–¥–æ–≤:`, Object.keys(periods || {}));
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∞–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if (periods.quarters) {
                    console.log(`üîÑ ReportsService: –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∞–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
                    periodData = Object.entries(periods.quarters)
                        .filter(([quarter, data]) => data && (data.actual !== null || data.plan !== null))
                        .map(([quarter, data]) => ({
                            label: `Q${quarter}`,
                            plan: data.plan || 0,
                            fact: data.actual || 0,
                            deviation: (data.actual || 0) - (data.plan || 0)
                        }));
                }
            }

            console.log(`üîç ReportsService: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}:`, periodData);

            if (periodData.length > 0) {
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ chartData
                // Chart –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ plan, fact, deviation
                console.log(`‚úÖ ReportsService: –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä–∞—Ñ–∏–∫ ${periodData.length} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}`);
                chartData.push(...periodData);
            } else {
                console.log(`‚ö†Ô∏è ReportsService: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫—É ${index + 1} - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞`);
            }
        });

        console.log('üìä ReportsService: –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞:', chartData);
        console.log('üìä ReportsService: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö:', chartData.length);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if (chartData.length === 0) {
            console.log('‚ö†Ô∏è ReportsService: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            chartData.push(
                { label: 'Q1', plan: 100, fact: 120, deviation: 20 },
                { label: 'Q2', plan: 150, fact: 140, deviation: -10 },
                { label: 'Q3', plan: 200, fact: 180, deviation: -20 },
                { label: 'Q4', plan: 180, fact: 200, deviation: 20 }
            );
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        if (chartData.length > 0) {
            console.log('üìä ReportsService: –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', chartData[0]);
            console.log('üìä ReportsService: –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏:', Object.keys(chartData[0]));
        }
        
        return chartData;
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
     */
    prepareFinanceTableData(rawData, filters) {
        if (!Array.isArray(rawData) || rawData.length === 0) {
            return [];
        }

        const tableData = [];
        const periodType = filters.periodType || 'quarters';

        rawData.forEach(metric => {
            const periods = metric.periods;
            if (!periods) return;

            let periodData = [];
            
            if (periodType === 'quarters' && periods.quarters) {
                periodData = Object.entries(periods.quarters).map(([quarter, data]) => ({
                    period: `Q${quarter}`,
                    plan: data.plan || 0,
                    fact: data.actual || 0,
                    deviation: (data.actual || 0) - (data.plan || 0),
                    deviationPercent: data.plan ? (((data.actual || 0) - (data.plan || 0)) / data.plan * 100) : 0
                }));
            } else if (periodType === 'months' && periods.months) {
                periodData = Object.entries(periods.months).map(([month, data]) => ({
                    period: this.getMonthName(parseInt(month)),
                    plan: data.plan || 0,
                    fact: data.actual || 0,
                    deviation: (data.actual || 0) - (data.plan || 0),
                    deviationPercent: data.plan ? (((data.actual || 0) - (data.plan || 0)) / data.plan * 100) : 0
                }));
            }

            if (periodData.length > 0) {
                tableData.push({
                    metric: metric.metric_name,
                    category: metric.category_name,
                    unit: metric.unit,
                    periods: periodData
                });
            }
        });

        return tableData;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
     */
    getFinanceTableColumns(filters) {
        return [
            { key: 'metric', label: '–ú–µ—Ç—Ä–∏–∫–∞', sortable: true },
            { key: 'category', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', sortable: true },
            { key: 'unit', label: '–ï–¥–∏–Ω–∏—Ü–∞', sortable: false },
            { key: 'period', label: '–ü–µ—Ä–∏–æ–¥', sortable: true },
            { key: 'plan', label: '–ü–ª–∞–Ω', sortable: true, type: 'number' },
            { key: 'fact', label: '–§–∞–∫—Ç', sortable: true, type: 'number' },
            { key: 'deviation', label: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', sortable: true, type: 'number' },
            { key: 'deviationPercent', label: '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', sortable: true, type: 'number' }
        ];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    getSelectedMetrics(filters) {
        const metrics = [];
        if (filters.showPlan !== false) metrics.push('plan');
        if (filters.showFact !== false) metrics.push('fact');
        if (filters.showDeviation === true) metrics.push('deviation');
        
        console.log('üîç ReportsService: getSelectedMetrics –≤—ã–∑–≤–∞–Ω–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);
        console.log('üîç ReportsService: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', metrics);
        
        return metrics;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
     */
    getShopName(shopId) {
        if (!shopId || shopId === 'all') return '–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã';
        return `–ú–∞–≥–∞–∑–∏–Ω ${shopId}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getCategoryName(categoryId) {
        if (!categoryId || categoryId === 'all') return '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        return `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏
     */
    getMetricName(metricId) {
        if (!metricId || metricId === 'all') return '–í—Å–µ –º–µ—Ç—Ä–∏–∫–∏';
        return `–ú–µ—Ç—Ä–∏–∫–∞ ${metricId}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
     */
    getMonthName(month) {
        const months = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ];
        return months[month - 1] || `–ú–µ—Å—è—Ü ${month}`;
    }
}

export default new ReportsService();