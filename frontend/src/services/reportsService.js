import { ApiClient } from './http/ApiClient';
import jsPDF from 'jspdf';
import PptxGenJS from 'pptxgenjs';
import html2canvas from 'html2canvas';
import * as htmlToImage from 'html-to-image';
import slideRenderer from './slideRenderer';

class ReportsService {
    constructor() {
        this.apiClient = new ApiClient();
    }

    async getMetricsForCategory(categoryId) {
        try {
            const params = new URLSearchParams();
            if (categoryId && categoryId !== 'all') {
                params.append('category_id', categoryId);
            }
            
            const url = `/finance/metrics?${params}`;
            console.log('üîÑ ReportsService: –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –ø–æ URL:', url);
            console.log('üîÑ ReportsService: categoryId:', categoryId);
            
            const response = await this.apiClient.get(url);
            console.log('‚úÖ ReportsService: –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            console.log('üìä ReportsService: –¢–∏–ø –æ—Ç–≤–µ—Ç–∞:', typeof response);
            console.log('üìä ReportsService: –≠—Ç–æ –º–∞—Å—Å–∏–≤?', Array.isArray(response));
            
            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –≤ –ø–æ–ª–µ data
            const metrics = Array.isArray(response) ? response : (response.data || []);
            console.log('üìä ReportsService: –î–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫:', metrics);
            console.log('üìä ReportsService: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫:', metrics.length);
            
            if (metrics.length > 0) {
                console.log('üìä ReportsService: –ü–µ—Ä–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞:', metrics[0]);
            }
            
            return metrics;
        } catch (error) {
            console.error('‚ùå ReportsService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error);
            console.error('‚ùå ReportsService: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–ª–∞–π–¥–æ–≤
     */
    async getFinanceDataForSlide(filters = {}) {
        try {
            const params = new URLSearchParams();
            
            if (filters.year) params.append('year', filters.year);
            if (filters.shop && filters.shop !== 'all') params.append('shop_id', filters.shop);
            if (filters.category && filters.category !== 'all') params.append('category_id', filters.category);
            if (filters.metric && filters.metric !== 'all') params.append('metric_id', filters.metric);
            
            console.log('üîÑ ReportsService: –ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);
            const response = await this.apiClient.get(`/finance/metrics/with-data?${params}`);
            console.log('‚úÖ ReportsService: –û—Ç–≤–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', response);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            const chartData = this.prepareFinanceChartData(response, filters);
            console.log('üìä ReportsService: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:', chartData);
            
            return {
                chartData: chartData,
                tableData: this.prepareFinanceTableData(response, filters),
                tableColumns: this.getFinanceTableColumns(filters),
                selectedMetrics: this.getSelectedMetrics(filters),
                shopName: this.getShopName(filters.shop),
                categoryName: this.getCategoryName(filters.category),
                metricName: this.getMetricName(filters.metric),
                rawData: response
            };
        } catch (error) {
            console.error('‚ùå ReportsService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            console.error('‚ùå ReportsService: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data || error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    prepareFinanceChartData(rawData, filters) {
        console.log('üîç ReportsService: prepareFinanceChartData –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', rawData);
        console.log('üîç ReportsService: –§–∏–ª—å—Ç—Ä—ã:', filters);
        
        if (!Array.isArray(rawData) || rawData.length === 0) {
            console.log('‚ö†Ô∏è ReportsService: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
            return [];
        }

        const periodType = filters.periodType || 'quarters';
        const chartData = [];

        console.log('üîç ReportsService: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º', rawData.length, '–º–µ—Ç—Ä–∏–∫');
        console.log('üîç ReportsService: –¢–∏–ø –ø–µ—Ä–∏–æ–¥–∞:', periodType);

        rawData.forEach((metric, index) => {
            console.log(`üîç ReportsService: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É ${index + 1}:`, metric);
            
            const periods = metric.periods;
            console.log(`üîç ReportsService: –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}:`, periods);
            
            if (!periods) {
                console.log(`‚ö†Ô∏è ReportsService: –ù–µ—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}`);
                return;
            }

            let periodData = [];
            
            if (periodType === 'quarters' && periods.quarters) {
                console.log(`üîç ReportsService: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–≤–∞—Ä—Ç–∞–ª—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}:`, periods.quarters);
                periodData = Object.entries(periods.quarters)
                    .filter(([quarter, data]) => data && (data.actual !== null || data.plan !== null))
                    .map(([quarter, data]) => ({
                        label: `Q${quarter}`,
                        plan: data.plan || 0,
                        fact: data.actual || 0,
                        deviation: (data.actual || 0) - (data.plan || 0)
                    }));
            } else if (periodType === 'months' && periods.months) {
                console.log(`üîç ReportsService: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Å—è—Ü—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}:`, periods.months);
                periodData = Object.entries(periods.months)
                    .filter(([month, data]) => data && (data.actual !== null || data.plan !== null))
                    .map(([month, data]) => ({
                        label: this.getMonthName(parseInt(month)),
                        plan: data.plan || 0,
                        fact: data.actual || 0,
                        deviation: (data.actual || 0) - (data.plan || 0)
                    }));
            } else if (periodType === 'year' && periods.year) {
                console.log(`üîç ReportsService: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–¥ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}:`, periods.year);
                periodData = [{
                    label: '–ì–æ–¥',
                    plan: periods.year.plan || 0,
                    fact: periods.year.actual || 0,
                    deviation: (periods.year.actual || 0) - (periods.year.plan || 0)
                }];
            } else {
                console.log(`‚ö†Ô∏è ReportsService: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞ ${periodType} –≤ –º–µ—Ç—Ä–∏–∫–µ ${index + 1}`);
                console.log(`üîç ReportsService: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –ø–µ—Ä–∏–æ–¥–æ–≤:`, Object.keys(periods || {}));
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∞–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if (periods.quarters) {
                    console.log(`üîÑ ReportsService: –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∞–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
                    periodData = Object.entries(periods.quarters)
                        .filter(([quarter, data]) => data && (data.actual !== null || data.plan !== null))
                        .map(([quarter, data]) => ({
                            label: `Q${quarter}`,
                            plan: data.plan || 0,
                            fact: data.actual || 0,
                            deviation: (data.actual || 0) - (data.plan || 0)
                        }));
                }
            }

            console.log(`üîç ReportsService: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}:`, periodData);

            if (periodData.length > 0) {
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ chartData
                // Chart –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ plan, fact, deviation
                console.log(`‚úÖ ReportsService: –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä–∞—Ñ–∏–∫ ${periodData.length} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ ${index + 1}`);
                chartData.push(...periodData);
            } else {
                console.log(`‚ö†Ô∏è ReportsService: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫—É ${index + 1} - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞`);
            }
        });

        console.log('üìä ReportsService: –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞:', chartData);
        console.log('üìä ReportsService: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö:', chartData.length);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if (chartData.length === 0) {
            console.log('‚ö†Ô∏è ReportsService: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            chartData.push(
                { label: 'Q1', plan: 100, fact: 120, deviation: 20 },
                { label: 'Q2', plan: 150, fact: 140, deviation: -10 },
                { label: 'Q3', plan: 200, fact: 180, deviation: -20 },
                { label: 'Q4', plan: 180, fact: 200, deviation: 20 }
            );
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        if (chartData.length > 0) {
            console.log('üìä ReportsService: –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', chartData[0]);
            console.log('üìä ReportsService: –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏:', Object.keys(chartData[0]));
        }
        
        return chartData;
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
     */
    prepareFinanceTableData(rawData, filters) {
        if (!Array.isArray(rawData) || rawData.length === 0) {
            return [];
        }

        const tableData = [];
        const periodType = filters.periodType || 'quarters';

        rawData.forEach(metric => {
            const periods = metric.periods;
            if (!periods) return;

            let periodData = [];
            
            if (periodType === 'quarters' && periods.quarters) {
                periodData = Object.entries(periods.quarters).map(([quarter, data]) => ({
                    period: `Q${quarter}`,
                    plan: data.plan || 0,
                    fact: data.actual || 0,
                    deviation: (data.actual || 0) - (data.plan || 0),
                    deviationPercent: data.plan ? (((data.actual || 0) - (data.plan || 0)) / data.plan * 100) : 0
                }));
            } else if (periodType === 'months' && periods.months) {
                periodData = Object.entries(periods.months).map(([month, data]) => ({
                    period: this.getMonthName(parseInt(month)),
                    plan: data.plan || 0,
                    fact: data.actual || 0,
                    deviation: (data.actual || 0) - (data.plan || 0),
                    deviationPercent: data.plan ? (((data.actual || 0) - (data.plan || 0)) / data.plan * 100) : 0
                }));
            }

            if (periodData.length > 0) {
                tableData.push({
                    metric: metric.metric_name,
                    category: metric.category_name,
                    unit: metric.unit,
                    periods: periodData
                });
            }
        });

        return tableData;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
     */
    getFinanceTableColumns(filters) {
        return [
            { key: 'metric', label: '–ú–µ—Ç—Ä–∏–∫–∞', sortable: true },
            { key: 'category', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', sortable: true },
            { key: 'unit', label: '–ï–¥–∏–Ω–∏—Ü–∞', sortable: false },
            { key: 'period', label: '–ü–µ—Ä–∏–æ–¥', sortable: true },
            { key: 'plan', label: '–ü–ª–∞–Ω', sortable: true, type: 'number' },
            { key: 'fact', label: '–§–∞–∫—Ç', sortable: true, type: 'number' },
            { key: 'deviation', label: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', sortable: true, type: 'number' },
            { key: 'deviationPercent', label: '% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', sortable: true, type: 'number' }
        ];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    getSelectedMetrics(filters) {
        const metrics = [];
        if (filters.showPlan !== false) metrics.push('plan');
        if (filters.showFact !== false) metrics.push('fact');
        if (filters.showDeviation === true) metrics.push('deviation');
        
        console.log('üîç ReportsService: getSelectedMetrics –≤—ã–∑–≤–∞–Ω–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);
        console.log('üîç ReportsService: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', metrics);
        
        return metrics;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
     */
    getShopName(shopId) {
        if (!shopId || shopId === 'all') return '–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã';
        return `–ú–∞–≥–∞–∑–∏–Ω ${shopId}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getCategoryName(categoryId) {
        if (!categoryId || categoryId === 'all') return '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
        return `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏
     */
    getMetricName(metricId) {
        if (!metricId || metricId === 'all') return '–í—Å–µ –º–µ—Ç—Ä–∏–∫–∏';
        return `–ú–µ—Ç—Ä–∏–∫–∞ ${metricId}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
     */
    getMonthName(month) {
        const months = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ];
        return months[month - 1] || `–ú–µ—Å—è—Ü ${month}`;
    }

    /**
     * –ó–∞—Ö–≤–∞—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º html-to-image
     */
    async captureChartAsImageWithHtmlToImage(chartElement, options = {}) {
        try {
            if (!chartElement) {
                console.warn('Chart element not found for capture');
                return null;
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º—ã–π
            if (chartElement.offsetWidth === 0 || chartElement.offsetHeight === 0) {
                console.warn('Chart element has zero dimensions');
                return null;
            }

            console.log(`üì∏ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å html-to-image, —Ä–∞–∑–º–µ—Ä—ã: ${chartElement.offsetWidth}x${chartElement.offsetHeight}`);

            // –ñ–¥–µ–º, —á—Ç–æ–±—ã –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
            await new Promise(resolve => setTimeout(resolve, 500));

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º html-to-image –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å SVG
            const dataURL = await htmlToImage.toPng(chartElement, {
                backgroundColor: options.backgroundColor || '#ffffff',
                pixelRatio: options.scale || 3,
                quality: 1.0,
                cacheBust: true,
                filter: (node) => {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å –∑–∞—Ö–≤–∞—Ç—É
                    return !node.classList?.contains('spinner-border') && 
                           !node.classList?.contains('loading') &&
                           !node.classList?.contains('tooltip') &&
                           !node.classList?.contains('popover');
                }
            });

            if (!dataURL || dataURL === 'data:,') {
                console.warn('Invalid data URL generated with html-to-image');
                return null;
            }

            console.log(`‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–≤–∞—á–µ–Ω —Å html-to-image, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${dataURL.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            return dataURL;

        } catch (error) {
            console.error('Error capturing chart with html-to-image:', error);
            return null;
        }
    }

    /**
     * –ó–∞—Ö–≤–∞—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    async captureChartAsImage(chartElement, options = {}) {
        try {
            if (!chartElement) {
                console.warn('Chart element not found for capture');
                return null;
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º—ã–π
            if (chartElement.offsetWidth === 0 || chartElement.offsetHeight === 0) {
                console.warn('Chart element has zero dimensions');
                return null;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ SVG —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≥—Ä–∞—Ñ–∏–∫–µ
            const svgElements = chartElement.querySelectorAll('svg');
            const canvasElements = chartElement.querySelectorAll('canvas');
            
            console.log(`Found ${svgElements.length} SVG elements and ${canvasElements.length} canvas elements`);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å SVG —ç–ª–µ–º–µ–Ω—Ç—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            if (svgElements.length > 0) {
                console.log('Processing SVG elements for better capture...');
                
                // –ñ–¥–µ–º, —á—Ç–æ–±—ã SVG –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º SVG
                svgElements.forEach(svg => {
                    svg.style.display = 'none';
                    svg.offsetHeight; // Force reflow
                    svg.style.display = 'block';
                });
                
                await new Promise(resolve => setTimeout(resolve, 500));
            }

            // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            await new Promise(resolve => setTimeout(resolve, 200));

            const canvas = await html2canvas(chartElement, {
                backgroundColor: options.backgroundColor || '#ffffff',
                scale: options.scale || 3, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                useCORS: true,
                allowTaint: true,
                logging: true, // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                width: options.width || chartElement.offsetWidth,
                height: options.height || chartElement.offsetHeight,
                windowWidth: chartElement.scrollWidth,
                windowHeight: chartElement.scrollHeight,
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
                ignoreElements: (element) => {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å –∑–∞—Ö–≤–∞—Ç—É
                    return element.classList.contains('spinner-border') || 
                           element.classList.contains('loading') ||
                           element.classList.contains('tooltip') ||
                           element.classList.contains('popover');
                },
                onclone: (clonedDoc) => {
                    // –£–ª—É—á—à–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
                    const clonedElement = clonedDoc.querySelector(`[data-slide-id="${chartElement.getAttribute('data-slide-id')}"]`);
                    if (clonedElement) {
                        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
                        const style = clonedDoc.createElement('style');
                        style.textContent = `
                            * {
                                animation: none !important;
                                transition: none !important;
                                transform: none !important;
                            }
                            svg {
                                display: block !important;
                                visibility: visible !important;
                                width: 100% !important;
                                height: 100% !important;
                            }
                            .chart-container {
                                width: 100% !important;
                                height: 100% !important;
                            }
                        `;
                        clonedDoc.head.appendChild(style);
                        
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è SVG
                        const svgElements = clonedElement.querySelectorAll('svg');
                        svgElements.forEach(svg => {
                            if (!svg.getAttribute('width')) {
                                svg.setAttribute('width', '100%');
                            }
                            if (!svg.getAttribute('height')) {
                                svg.setAttribute('height', '100%');
                            }
                        });
                    }
                }
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ canvas –Ω–µ –ø—É—Å—Ç–æ–π
            if (canvas.width === 0 || canvas.height === 0) {
                console.warn('Captured canvas is empty');
                return null;
            }

            const dataURL = canvas.toDataURL('image/png', 1.0);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dataURL –≤–∞–ª–∏–¥–Ω—ã–π
            if (!dataURL || dataURL === 'data:,') {
                console.warn('Invalid data URL generated');
                return null;
            }

            console.log(`Chart captured successfully: ${canvas.width}x${canvas.height}`);
            return dataURL;
        } catch (error) {
            console.error('Error capturing chart as image:', error);
            return null;
        }
    }

    /**
     * –ó–∞—Ö–≤–∞—Ç –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ
     */
    async captureAllCharts(report) {
        const chartImages = new Map();
        
        console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ —Å ${report.slides.length} —Å–ª–∞–π–¥–∞–º–∏`);
        
        for (const slide of report.slides) {
            if (this.isChartSlide(slide.type)) {
                console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–∞–π–¥ ${slide.id} —Ç–∏–ø–∞ ${slide.type}`);
                
                try {
                    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ ID —Å–ª–∞–π–¥–∞
                    let chartElement = document.querySelector(`[data-slide-id="${slide.id}"] .chart-container`);
                    
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ
                    if (!chartElement) {
                        console.log(`üîç –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ`);
                        chartElement = document.querySelector(`[data-slide-id="${slide.id}"]`);
                        if (chartElement) {
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}`);
                        }
                    }
                    
                    if (chartElement) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}, —Ä–∞–∑–º–µ—Ä—ã: ${chartElement.offsetWidth}x${chartElement.offsetHeight}`);
                        
                        // –ñ–¥–µ–º, –ø–æ–∫–∞ –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è
                        await this.waitForChartToRender(chartElement);
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                        await new Promise(resolve => setTimeout(resolve, 500));
                        
                        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º html-to-image, –∑–∞—Ç–µ–º fallback –Ω–∞ html2canvas
                        let imageData = await this.captureChartAsImageWithHtmlToImage(chartElement, {
                            scale: 3, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                            backgroundColor: '#ffffff'
                        });
                        
                        // –ï—Å–ª–∏ html-to-image –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º html2canvas
                        if (!imageData) {
                            console.log(`üîÑ html-to-image –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}, –ø—Ä–æ–±—É–µ–º html2canvas`);
                            imageData = await this.captureChartAsImage(chartElement, {
                                scale: 3,
                                backgroundColor: '#ffffff'
                            });
                        }
                        
                        if (imageData) {
                            chartImages.set(slide.id, imageData);
                            console.log(`‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–≤–∞—á–µ–Ω –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${imageData.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                        } else {
                            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}`);
                        }
                    } else {
                        console.warn(`‚ùå –≠–ª–µ–º–µ–Ω—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}`);
                        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                        const altElement = document.querySelector(`[data-slide-id="${slide.id}"]`);
                        if (altElement) {
                            console.log(`üîç –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}:`, altElement);
                        }
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}:`, error);
                }
            } else {
                console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∞–π–¥ ${slide.id} —Ç–∏–ø–∞ ${slide.type} (–Ω–µ –≥—Ä–∞—Ñ–∏–∫)`);
            }
        }
        
        console.log(`üìä –ó–∞—Ö–≤–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ ${chartImages.size} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫–æ–≤`);
        return chartImages;
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    async waitForChartToRender(chartElement, maxWaitTime = 5000) {
        return new Promise((resolve) => {
            const startTime = Date.now();
            
            const checkChart = () => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–æ–ª–±—Ü—ã –≥—Ä–∞—Ñ–∏–∫–∞
                const bars = chartElement.querySelectorAll('.chart-bar, [class*="chartBar"], rect, circle, path');
                const hasBars = bars.length > 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ SVG —ç–ª–µ–º–µ–Ω—Ç—ã
                const svgElements = chartElement.querySelectorAll('svg');
                const hasSvg = svgElements.length > 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ canvas —ç–ª–µ–º–µ–Ω—Ç—ã
                const canvasElements = chartElement.querySelectorAll('canvas');
                const hasCanvas = canvasElements.length > 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –≥—Ä–∞—Ñ–∏–∫–µ
                const hasData = chartElement.textContent && 
                    !chartElement.textContent.includes('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö') &&
                    !chartElement.textContent.includes('–ó–∞–≥—Ä—É–∑–∫–∞') &&
                    !chartElement.textContent.includes('Loading');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä–∞—Ñ–∏–∫ –≤–∏–¥–∏–º—ã–π
                const isVisible = chartElement.offsetWidth > 0 && chartElement.offsetHeight > 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SVG —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç —Ä–∞–∑–º–µ—Ä—ã
                const svgHasSize = svgElements.length === 0 || 
                    Array.from(svgElements).every(svg => svg.offsetWidth > 0 && svg.offsetHeight > 0);
                
                console.log(`Chart check: bars=${hasBars}, svg=${hasSvg}, canvas=${hasCanvas}, data=${hasData}, visible=${isVisible}, svgSize=${svgHasSize}`);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if (svgElements.length > 0) {
                    console.log(`SVG elements found: ${svgElements.length}`);
                    svgElements.forEach((svg, index) => {
                        console.log(`SVG ${index}: ${svg.offsetWidth}x${svg.offsetHeight}, viewBox: ${svg.getAttribute('viewBox')}`);
                    });
                }
                
                if ((hasBars || hasSvg || hasCanvas) && hasData && isVisible && svgHasSize) {
                    console.log('Chart is ready for capture');
                    resolve();
                } else if (Date.now() - startTime > maxWaitTime) {
                    console.warn('Chart render timeout, proceeding anyway');
                    resolve();
                } else {
                    // –ñ–¥–µ–º –µ—â–µ 200ms –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                    setTimeout(checkChart, 200);
                }
            };
            
            checkChart();
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–∞–π–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
     */
    isChartSlide(slideType) {
        return ['analytics-chart', 'finance-chart', 'trends', 'plan-vs-actual', 'comparison'].includes(slideType);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
     */
    async generateClientPDF(report, options = {}) {
        try {
            console.log('üîÑ ReportsService: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è –æ—Ç—á–µ—Ç–∞:', report.title);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ª–∞–π–¥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º —Å–ª–∞–π–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
            const chartImages = await slideRenderer.renderAllSlides(report, options.slideDataMap || new Map());
            console.log(`üé® –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${chartImages.size} —Å–ª–∞–π–¥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ö–≤–∞—á–µ–Ω—ã
            if (chartImages.size === 0) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞');
            }
            
            const pdf = new jsPDF({
                orientation: options.orientation || 'landscape',
                unit: 'mm',
                format: options.format || 'a4'
            });

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const pageWidth = pdf.internal.pageSize.getWidth();
            const pageHeight = pdf.internal.pageSize.getHeight();
            const margin = 20;
            const contentWidth = pageWidth - (margin * 2);
            const contentHeight = pageHeight - (margin * 2);

            let currentY = margin;

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            pdf.setFontSize(20);
            pdf.setFont('helvetica', 'bold');
            pdf.text(report.title || '–û—Ç—á–µ—Ç', margin, currentY);
            currentY += 15;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (report.description) {
                pdf.setFontSize(12);
                pdf.setFont('helvetica', 'normal');
                pdf.text(report.description, margin, currentY);
                currentY += 10;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            const createdDate = new Date(report.createdAt).toLocaleDateString('ru-RU');
            pdf.setFontSize(10);
            pdf.setFont('helvetica', 'italic');
            pdf.text(`–°–æ–∑–¥–∞–Ω: ${createdDate}`, margin, currentY);
            currentY += 15;

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥—ã
            for (let i = 0; i < report.slides.length; i++) {
                const slide = report.slides[i];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if (currentY > pageHeight - 50) {
                    pdf.addPage();
                    currentY = margin;
                }

                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞
                pdf.setFontSize(16);
                pdf.setFont('helvetica', 'bold');
                pdf.text(`${i + 1}. ${slide.title}`, margin, currentY);
                currentY += 10;

                // –¢–∏–ø —Å–ª–∞–π–¥–∞
                pdf.setFontSize(12);
                pdf.setFont('helvetica', 'normal');
                const slideTypeNames = {
                    'title': '–¢–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥',
                    'analytics-chart': '–ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
                    'finance-chart': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫',
                    'analytics-table': '–¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
                    'finance-table': '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞',
                    'comparison': '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ',
                    'trends': '–¢—Ä–µ–Ω–¥—ã',
                    'plan-vs-actual': '–ü–ª–∞–Ω vs –§–∞–∫—Ç'
                };
                pdf.text(`–¢–∏–ø: ${slideTypeNames[slide.type] || slide.type}`, margin, currentY);
                currentY += 8;

                // –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä–∞—Ñ–∏–∫ –∏ —É –Ω–∞—Å –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if (this.isChartSlide(slide.type) && chartImages.has(slide.id)) {
                    try {
                        const imageData = chartImages.get(slide.id);
                        console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${imageData.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ imageData –≤–∞–ª–∏–¥–Ω—ã–π
                        if (!imageData || imageData === 'data:,') {
                            console.warn(`‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}`);
                            currentY += 10;
                            continue;
                        }
                        
                        const imgWidth = contentWidth;
                        const imgHeight = Math.min(imgWidth * 0.6, 120); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                        if (currentY + imgHeight > pageHeight - margin) {
                            pdf.addPage();
                            currentY = margin;
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                        pdf.addImage(imageData, 'PNG', margin, currentY, imgWidth, imgHeight, `chart_${slide.id}`, 'FAST');
                        currentY += imgHeight + 10;
                        
                        console.log(`üìä –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id} (${imgWidth}x${imgHeight})`);
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id}:`, error);
                        currentY += 10;
                    }
                } else if (this.isChartSlide(slide.type)) {
                    console.warn(`‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ chartImages`);
                    currentY += 10;
                }

                // –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                if (slide.content?.description) {
                    pdf.setFontSize(10);
                    pdf.text(slide.content.description, margin, currentY);
                    currentY += 6;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
                if (slide.content?.filters) {
                    const filters = slide.content.filters;
                    pdf.setFontSize(9);
                    pdf.setFont('helvetica', 'italic');
                    
                    const filterInfo = [];
                    if (filters.years && filters.years.length > 0) {
                        filterInfo.push(`–ì–æ–¥—ã: ${filters.years.join(', ')}`);
                    }
                    if (filters.categories && filters.categories.length > 0) {
                        filterInfo.push(`–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${filters.categories.length}`);
                    }
                    if (filters.shops && filters.shops.length > 0) {
                        filterInfo.push(`–ú–∞–≥–∞–∑–∏–Ω—ã: ${filters.shops.length}`);
                    }
                    if (filters.metrics && filters.metrics.length > 0) {
                        filterInfo.push(`–ú–µ—Ç—Ä–∏–∫–∏: ${filters.metrics.length}`);
                    }

                    if (filterInfo.length > 0) {
                        pdf.text(`–§–∏–ª—å—Ç—Ä—ã: ${filterInfo.join('; ')}`, margin, currentY);
                        currentY += 6;
                    }
                }

                currentY += 15; // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–ª–∞–π–¥–∞–º–∏
            }

            console.log('‚úÖ ReportsService: PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
            return pdf;

        } catch (error) {
            console.error('‚ùå ReportsService: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
            throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: ' + error.message);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
     */
    async generateClientPPTX(report, options = {}) {
        try {
            console.log('üîÑ ReportsService: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PowerPoint –¥–ª—è –æ—Ç—á–µ—Ç–∞:', report.title);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ª–∞–π–¥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º —Å–ª–∞–π–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è PowerPoint...');
            const chartImages = await slideRenderer.renderAllSlides(report, options.slideDataMap || new Map());
            console.log(`üé® –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ ${chartImages.size} —Å–ª–∞–π–¥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ö–≤–∞—á–µ–Ω—ã
            if (chartImages.size === 0) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è PowerPoint');
            }
            
            const pptx = new PptxGenJS();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
            pptx.defineLayout({ name: 'A4', width: 10, height: 7.5 });
            pptx.layout = 'A4';

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥—ã
            for (let i = 0; i < report.slides.length; i++) {
                const slide = report.slides[i];
                const pptxSlide = pptx.addSlide();

                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞
                pptxSlide.addText(slide.title, {
                    x: 0.5,
                    y: 0.5,
                    w: 9,
                    h: 0.8,
                    fontSize: 24,
                    bold: true,
                    color: '1f4e79',
                    align: 'center'
                });

                // –¢–∏–ø —Å–ª–∞–π–¥–∞
                const slideTypeNames = {
                    'title': '–¢–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥',
                    'analytics-chart': '–ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
                    'finance-chart': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫',
                    'analytics-table': '–¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
                    'finance-table': '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞',
                    'comparison': '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ',
                    'trends': '–¢—Ä–µ–Ω–¥—ã',
                    'plan-vs-actual': '–ü–ª–∞–Ω vs –§–∞–∫—Ç'
                };

                pptxSlide.addText(`–¢–∏–ø: ${slideTypeNames[slide.type] || slide.type}`, {
                    x: 0.5,
                    y: 1.5,
                    w: 9,
                    h: 0.4,
                    fontSize: 14,
                    color: '666666',
                    align: 'center'
                });

                // –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä–∞—Ñ–∏–∫ –∏ —É –Ω–∞—Å –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if (this.isChartSlide(slide.type) && chartImages.has(slide.id)) {
                    try {
                        const imageData = chartImages.get(slide.id);
                        console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id} –≤ PowerPoint, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${imageData.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ imageData –≤–∞–ª–∏–¥–Ω—ã–π
                        if (!imageData || imageData === 'data:,') {
                            console.warn(`‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id} –≤ PowerPoint`);
                        } else {
                            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
                            pptxSlide.addImage({
                                data: imageData,
                                x: 0.5,
                                y: 2.0,
                                w: 9,
                                h: 5,
                                sizing: {
                                    type: 'contain',
                                    w: 9,
                                    h: 5
                                }
                            });
                            
                            console.log(`üìä –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id} –≤ PowerPoint (9x5)`);
                        }
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id} –≤ PowerPoint:`, error);
                    }
                } else if (this.isChartSlide(slide.type)) {
                    console.warn(`‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slide.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ chartImages –¥–ª—è PowerPoint`);
                } else {
                    // –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (slide.content?.description) {
                        pptxSlide.addText(slide.content.description, {
                            x: 0.5,
                            y: 2.0,
                            w: 9,
                            h: 1.0,
                            fontSize: 12,
                            color: '333333',
                            align: 'center'
                        });
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (slide.content?.filters) {
                        const filters = slide.content.filters;
                        const filterInfo = [];
                        
                        if (filters.years && filters.years.length > 0) {
                            filterInfo.push(`–ì–æ–¥—ã: ${filters.years.join(', ')}`);
                        }
                        if (filters.categories && filters.categories.length > 0) {
                            filterInfo.push(`–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${filters.categories.length}`);
                        }
                        if (filters.shops && filters.shops.length > 0) {
                            filterInfo.push(`–ú–∞–≥–∞–∑–∏–Ω—ã: ${filters.shops.length}`);
                        }
                        if (filters.metrics && filters.metrics.length > 0) {
                            filterInfo.push(`–ú–µ—Ç—Ä–∏–∫–∏: ${filters.metrics.length}`);
                        }

                        if (filterInfo.length > 0) {
                            pptxSlide.addText(`–§–∏–ª—å—Ç—Ä—ã: ${filterInfo.join('; ')}`, {
                                x: 0.5,
                                y: 3.5,
                                w: 9,
                                h: 0.6,
                                fontSize: 10,
                                color: '666666',
                                align: 'center'
                            });
                        }
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–ª–∞–π–¥–∞
                pptxSlide.addText(`${i + 1}`, {
                    x: 8.5,
                    y: 6.5,
                    w: 1,
                    h: 0.5,
                    fontSize: 12,
                    color: '999999',
                    align: 'right'
                });
            }

            console.log('‚úÖ ReportsService: PowerPoint —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
            return pptx;

        } catch (error) {
            console.error('‚ùå ReportsService: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PowerPoint:', error);
            throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PowerPoint: ' + error.message);
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
     */
    async exportToPDF(reportId, options = {}) {
        try {
            const response = await this.apiClient.post('/reports/export/pdf', {
                report_id: reportId,
                ...options
            });
            return response;
        } catch (error) {
            console.error('‚ùå ReportsService: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF:', error);
            throw error;
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –≤ PowerPoint —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
     */
    async exportToPPTX(reportId, options = {}) {
        try {
            const response = await this.apiClient.post('/reports/export/pptx', {
                report_id: reportId,
                ...options
            });
            return response;
        } catch (error) {
            console.error('‚ùå ReportsService: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ PowerPoint:', error);
            throw error;
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    async downloadExport(downloadUrl) {
        try {
            const link = document.createElement('a');
            link.href = downloadUrl;
            link.download = '';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        } catch (error) {
            console.error('‚ùå ReportsService: –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }
}

export default new ReportsService();