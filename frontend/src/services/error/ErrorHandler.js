/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 * –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ SRP - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 */

import { HTTP_STATUS, APP_CONSTANTS } from '../../config/magic-numbers.js';

export class ErrorHandler {
    constructor() {
        this.errorListeners = new Set();
        this.errorCounts = new Map();
        this.lastErrors = [];
        this.maxLastErrors = 10;
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è –æ—à–∏–±–æ–∫
     * @param {Function} listener - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
     * @returns {void}
     */
    subscribe(listener) {
        this.errorListeners.add(listener);
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –æ—à–∏–±–æ–∫
     * @param {Function} listener - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
     * @returns {void}
     */
    unsubscribe(listener) {
        this.errorListeners.delete(listener);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
     * @param {Error} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
     * @returns {void}
     */
    handleError(error, context = {}) {
        const processedError = this.processError(error, context);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.saveToHistory(processedError);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        this.incrementErrorCount(processedError.type);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        this.notifyListeners(processedError);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        this.logError(processedError);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏
     * @param {Error} error - –ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç
     * @returns {Object} - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
     */
    processError(error, context) {
        const timestamp = new Date().toISOString();
        
        let errorType = 'UNKNOWN';
        let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        let severity = 'error';
        let shouldRetry = false;

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if (this.isNetworkError(error)) {
            errorType = 'NETWORK';
            userMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É';
            severity = 'warning';
            shouldRetry = true;
        } else if (this.isAuthError(error)) {
            errorType = 'AUTH';
            userMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
            severity = 'error';
            shouldRetry = false;
        } else if (this.isValidationError(error)) {
            errorType = 'VALIDATION';
            userMessage = this.extractValidationMessage(error);
            severity = 'warning';
            shouldRetry = false;
        } else if (this.isServerError(error)) {
            errorType = 'SERVER';
            userMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            severity = 'error';
            shouldRetry = true;
        }

        return {
            id: this.generateErrorId(),
            type: errorType,
            originalError: error,
            message: error.message || 'Unknown error',
            userMessage,
            severity,
            shouldRetry,
            timestamp,
            context,
            stack: error.stack
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É
     * @param {Error} error - –û—à–∏–±–∫–∞
     * @returns {boolean} - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π
     */
    isNetworkError(error) {
        return error.name === 'NetworkError' ||
               error.message.includes('fetch') ||
               error.message.includes('network') ||
               error.code === 'NETWORK_ERROR';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     * @param {Error} error - –û—à–∏–±–∫–∞
     * @returns {boolean} - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    isAuthError(error) {
        return error.status === HTTP_STATUS.UNAUTHORIZED ||
               error.status === HTTP_STATUS.FORBIDDEN ||
               error.message.includes('unauthorized') ||
               error.message.includes('forbidden');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @param {Error} error - –û—à–∏–±–∫–∞
     * @returns {boolean} - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    isValidationError(error) {
        return error.status === HTTP_STATUS.BAD_REQUEST ||
               error.status === HTTP_STATUS.UNPROCESSABLE_ENTITY ||
               error.name === 'ValidationError';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—É—é –æ—à–∏–±–∫—É
     * @param {Error} error - –û—à–∏–±–∫–∞
     * @returns {boolean} - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–æ–π
     */
    isServerError(error) {
        return error.status >= HTTP_STATUS.INTERNAL_SERVER_ERROR ||
               error.name === 'ServerError';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @param {Error} error - –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @returns {string} - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    extractValidationMessage(error) {
        if (error.details && Array.isArray(error.details)) {
            return error.details.map(d => d.message).join(', ');
        }
        
        if (error.message) {
            return error.message;
        }
        
        return '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
     * @param {Object} processedError - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
     * @returns {void}
     */
    saveToHistory(processedError) {
        this.lastErrors.unshift(processedError);
        
        if (this.lastErrors.length > this.maxLastErrors) {
            this.lastErrors = this.lastErrors.slice(0, this.maxLastErrors);
        }
    }

    /**
     * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
     * @param {string} errorType - –¢–∏–ø –æ—à–∏–±–∫–∏
     * @returns {void}
     */
    incrementErrorCount(errorType) {
        const currentCount = this.errorCounts.get(errorType) || 0;
        this.errorCounts.set(errorType, currentCount + 1);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
     * @param {Object} processedError - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
     * @returns {void}
     */
    notifyListeners(processedError) {
        this.errorListeners.forEach(listener => {
            try {
                listener(processedError);
            } catch (error) {
                console.error('Error in error listener:', error);
            }
        });
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
     * @param {Object} processedError - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
     * @returns {void}
     */
    logError(processedError) {
        const logMethod = this.getLogMethod(processedError.severity);
        
        console.group(`üö® ${processedError.type} Error`);
        console[logMethod]('Message:', processedError.message);
        console[logMethod]('User Message:', processedError.userMessage);
        console[logMethod]('Context:', processedError.context);
        console[logMethod]('Timestamp:', processedError.timestamp);
        
        if (processedError.stack) {
            console[logMethod]('Stack:', processedError.stack);
        }
        
        console.groupEnd();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—é —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
     * @param {string} severity - –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
     * @returns {string} - –ú–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    getLogMethod(severity) {
        switch (severity) {
            case 'error': return 'error';
            case 'warning': return 'warn';
            case 'info': return 'info';
            default: return 'log';
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –æ—à–∏–±–∫–∏
     * @returns {string} - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
     */
    generateErrorId() {
        return `error_${Date.now()}_${Math.random().toString(APP_CONSTANTS.UUID_PART_LENGTH).substr(2, APP_CONSTANTS.UUID_PART_LENGTH)}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
     */
    getErrorStatistics() {
        return {
            totalErrors: this.lastErrors.length,
            errorCounts: Object.fromEntries(this.errorCounts),
            lastErrors: this.lastErrors.slice(0, 5), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
            listeners: this.errorListeners.size
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫
     * @returns {void}
     */
    clearHistory() {
        this.lastErrors = [];
        this.errorCounts.clear();
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫