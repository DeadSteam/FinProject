import { ApiClient } from '../http/ApiClient.js';
import { MockApiClient } from '../http/MockApiClient.js';

/**
 * –¢–∏–ø—ã API –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
export const ApiClientType = {
    REAL: 'real',
    MOCK: 'mock'
};

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏–π
 */
export const ApiEnvironment = {
    DEVELOPMENT: 'development',
    TESTING: 'testing',
    PRODUCTION: 'production'
};

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª–∏–µ–Ω—Ç–æ–≤
 * –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ OCP (Open/Closed) –∏ Factory Pattern
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
 */
export class ApiClientFactory {
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
     */
    static defaultConfigurations = {
        [ApiEnvironment.DEVELOPMENT]: {
            clientType: ApiClientType.REAL,
            enableLogging: true,
            enableMockFallback: true,
            timeout: 10000
        },
        [ApiEnvironment.TESTING]: {
            clientType: ApiClientType.MOCK,
            enableLogging: false,
            enableMockFallback: false,
            timeout: 5000
        },
        [ApiEnvironment.PRODUCTION]: {
            clientType: ApiClientType.REAL,
            enableLogging: false,
            enableMockFallback: false,
            timeout: 15000
        }
    };

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞
     * @param {Object} options - –û–ø—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è
     * @param {string} options.type - –¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ (real|mock)
     * @param {string} options.environment - –û–∫—Ä—É–∂–µ–Ω–∏–µ
     * @param {Object} options.config - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     * @returns {IApiClient} - –≠–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
     */
    static create(options = {}) {
        const {
            type = this.detectClientType(),
            environment = this.detectEnvironment(),
            config = {}
        } = options;

        const defaultConfig = this.defaultConfigurations[environment] || 
                            this.defaultConfigurations[ApiEnvironment.DEVELOPMENT];

        const finalConfig = {
            ...defaultConfig,
            ...config,
            clientType: type || defaultConfig.clientType
        };

        return this.createClientByType(finalConfig.clientType, finalConfig);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É
     * @param {string} type - –¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     * @returns {IApiClient} - –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
     */
    static createClientByType(type, config) {
        switch (type) {
            case ApiClientType.MOCK:
                return this.createMockClient(config);
            
            case ApiClientType.REAL:
                return this.createRealClient(config);
            
            default:
                console.warn(`Unknown API client type: ${type}. Falling back to real client.`);
                return this.createRealClient(config);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     * @returns {ApiClient} - –≠–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
     */
    static createRealClient(config) {
        const client = new ApiClient();
        
        if (config.enableLogging) {
            this.addLoggingInterceptors(client);
        }

        if (config.timeout) {
            this.addTimeoutSupport(client, config.timeout);
        }

        return client;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ mock API –∫–ª–∏–µ–Ω—Ç–∞
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     * @returns {MockApiClient} - –≠–∫–∑–µ–º–ø–ª—è—Ä mock –∫–ª–∏–µ–Ω—Ç–∞
     */
    static createMockClient(config) {
        const client = new MockApiClient();
        
        if (config.mockDelay !== undefined) {
            client.setDelay(config.mockDelay);
        }

        if (config.enableLogging) {
            this.addLoggingInterceptors(client);
        }

        return client;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {Object} mockData - –ö–∞—Å—Ç–æ–º–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ
     * @returns {MockApiClient} - –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    static createTestClient(mockData = null) {
        const client = this.createMockClient({
            mockDelay: 0, // –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
            enableLogging: false
        });

        if (mockData) {
            client.mockData = { ...client.mockData, ...mockData };
        }

        return client;
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
     * @returns {string} - –¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
     */
    static detectClientType() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const urlParams = new URLSearchParams(window.location.search);
        const mockParam = urlParams.get('mock');
        
        if (mockParam === 'true') {
            return ApiClientType.MOCK;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        const storedType = localStorage.getItem('api_client_type');
        if (storedType && Object.values(ApiClientType).includes(storedType)) {
            return storedType;
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—é
        const environment = this.detectEnvironment();
        return this.defaultConfigurations[environment]?.clientType || ApiClientType.REAL;
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
     * @returns {string} - –û–∫—Ä—É–∂–µ–Ω–∏–µ
     */
    static detectEnvironment() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        if (typeof process !== 'undefined' && process.env) {
            const nodeEnv = process.env.NODE_ENV;
            if (nodeEnv === 'test') return ApiEnvironment.TESTING;
            if (nodeEnv === 'production') return ApiEnvironment.PRODUCTION;
            if (nodeEnv === 'development') return ApiEnvironment.DEVELOPMENT;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ hostname
        const {hostname} = window.location;
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            return ApiEnvironment.DEVELOPMENT;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É –∏ –ø–æ—Ä—Ç—É
        if (window.location.protocol === 'http:' && window.location.port) {
            return ApiEnvironment.DEVELOPMENT;
        }

        return ApiEnvironment.PRODUCTION;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä—É—é—â–∏—Ö –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–æ–≤
     * @param {IApiClient} client - API –∫–ª–∏–µ–Ω—Ç
     * @returns {void}
     */
    static addLoggingInterceptors(client) {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        client.addRequestInterceptor(async (config) => {
            console.group(`üîÑ API Request: ${config.method || 'GET'} ${config.url}`);
            console.log('Config:', config);
            console.groupEnd();
            return config;
        });

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
        client.addResponseInterceptor(async (response) => {
            const isSuccess = response.ok || response.status < 400;
            const icon = isSuccess ? '‚úÖ' : '‚ùå';
            
            console.group(`${icon} API Response: ${response.status}`);
            console.log('Response:', response);
            if (response.data) {
                console.log('Data:', response.data);
            }
            console.groupEnd();
            
            return response;
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ timeout
     * @param {IApiClient} client - API –∫–ª–∏–µ–Ω—Ç
     * @param {number} timeout - –¢–∞–π–º–∞—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @returns {void}
     */
    static addTimeoutSupport(client, timeout) {
        client.addRequestInterceptor(async (config) => {
            return {
                ...config,
                timeout
            };
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
     * @param {string} type - –ù–æ–≤—ã–π —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
     * @returns {void}
     */
    static switchClientType(type) {
        if (Object.values(ApiClientType).includes(type)) {
            localStorage.setItem('api_client_type', type);
            console.log(`API client type switched to: ${type}`);
        } else {
            console.error(`Invalid client type: ${type}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∫–ª–∏–µ–Ω—Ç–µ
     * @returns {Object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
     */
    static getClientInfo() {
        return {
            detectedType: this.detectClientType(),
            detectedEnvironment: this.detectEnvironment(),
            availableTypes: Object.values(ApiClientType),
            availableEnvironments: Object.values(ApiEnvironment)
        };
    }
} 